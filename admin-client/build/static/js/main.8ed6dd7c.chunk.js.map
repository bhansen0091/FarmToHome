{"version":3,"sources":["HOC/PrivateRoute.js","components/Navbar/MenuItems.jsx","redux/constants/adminConstants.js","helpers/axios.js","urlConfig.js","components/Navbar/NavBar.jsx","redux/actions/adminAuth.actions.js","components/Layout/Layout.jsx","components/OrderScreenCard/OrderScreenCard.jsx","components/Button/Button.jsx","redux/actions/order.actions.js","views/CurrentOrdersScreen/CurrentOrdersScreen.jsx","views/CompleteOrders/CompleteOrders.jsx","components/UI/Inputs/InputDefault.jsx","views/RegisterScreen/RegisterScreen.jsx","redux/actions/category.actions.js","components/CategoryForm/CategoryForm.jsx","components/CategoryComponents/EditCategoryModal/EditCategoryModal.jsx","components/CategoryComponents/AddCategoryModal/AddCategoryModal.jsx","components/CategoryComponents/DeleteCategoryModal/DeleteCategoryModal.jsx","views/CategoryScreen/CategoryScreen.jsx","redux/actions/initialData.actions.js","components/ProductModals/AddProductModal.jsx","components/ProductModals/EditProductModal.jsx","views/ProductsScreen/ProductScreen.jsx","redux/actions/product.actions.js","views/LoginScreen/LoginScreen.jsx","views/HomeScreen/HomeScreen.jsx","App.jsx","redux/reducers/adminReducer.js","redux/reducers/category.reducer.js","redux/reducers/product.reducer.js","redux/reducers/order.reducer.js","redux/store.js","index.js"],"names":["PrivateRoute","Component","component","rest","props","localStorage","getItem","to","NoLogMenuItems","title","url","cName","ADMIN_LOGIN_REQUEST","ADMIN_LOGIN_SUCCESS","ADMIN_LOGIN_FAIL","ADMIN_LOGOUT_REQUEST","ADMIN_LOGOUT_SUCCESS","ADMIN_LOGOUT_FAIL","ADMIN_REGISTRATION_REQUEST","ADMIN_REGISTRATION_SUCCESS","ADMIN_REGISTRATION_FAIL","GET_ALL_CATEGORIES_REQUEST","GET_ALL_CATEGORIES_SUCCESS","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","ADD_NEW_CATEGORY_FAIL","UPDATE_CATEGORIES_REQUEST","UPDATE_CATEGORIES_SUCCESS","UPDATE_CATEGORIES_FAIL","DELETE_CATEGORIES_REQUEST","DELETE_CATEGORIES_SUCCESS","DELETE_CATEGORIES_FAIL","GET_ALL_PRODUCTS_REQUEST","GET_ALL_PRODUCTS_SUCCESS","GET_CUSTOMER_ORDERS_SUCCESS","axiosInstance","axios","create","baseURL","NavBar","auth","useSelector","state","dispatch","useDispatch","useState","clicked","setClicked","className","onClick","authenticate","a","type","actionTypes","get","withCredentials","then","res","status","clear","payload","data","error","catch","err","response","map","item","idx","Layout","sidebar","Container","fluid","Row","Col","md","exact","children","OrderScreenCard","initialProduct","_id","product","name","price","inStock","measurement","quantity","qty","style","width","verticalAlign","textAlign","toFixed","STYLES","SIZES","Button","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","getCustomerOrders","orders","console","log","updateOrder","put","CurrentOrdersScreen","selectedOrder","setSelectedOrder","setType","reloadIt","setReloadIt","useEffect","makeDate","date","newDate","Date","month","getMonth","day","getDate","year","getFullYear","getCurrentOrderStatus","order","currentStatus","orderStatus","i","length","isCompleted","getNextOrderStatus","nextStatus","display","justifyContent","alignContent","flexDirection","margin","padding","Table","bordered","alignSelf","thisOrder","handleShow","colSpan","createdAt","items","productId","payablePrice","purchasedQty","onChange","e","target","value","marginLeft","orderId","handleUpdateOrder","CompleteOrdersScreen","InputDefault","Form","Label","label","Control","placeholder","RegisterScreen","regAuth","initialReg","firstName","lastName","email","password","confirmPassword","contactNumber","reg","setReg","regError","setRegError","handleRegInputs","errorMessage","loading","marginTop","onSubmit","preventDefault","user","post","message","register","Group","Text","as","controlId","variant","getAllCategories","categoryList","CategoryForm","inputs","handleInputChangeName","handleInputChangeParentId","categorySelectOptions","parentId","option","EditCategoryModal","show","size","onHide","expandedArray","checkedArray","handleEditCategoryInputs","handleClose","handleUpdate","Modal","aria-labelledby","centered","backdrop","keyboard","Header","closeButton","Title","Body","paddingLeft","expandedItem","checkedItem","AddCategoryModal","handleInputs","category","handleCreate","DeleteCategoryModal","deleteCategories","CategoryScreen","categoryState","setCategory","checked","setChecked","expanded","setExpanded","setCheckedArray","setExpandedArray","setShow","showUpdateModal","setUpdateUpdateModal","handleCloseUpdateModal","deleteWarningModal","setDeleteWarningModal","handleCloseDeleteWarning","updateCheckedAndExpandedArray","categories","generateCategoryList","checkedArr","expandedArr","forEach","categoryId","find","_idx","push","createCategorySelectOptions","options","nodes","renderCategories","myCategories","onCheck","onExpand","icons","check","uncheck","halfCheck","expandClose","expandOpen","cate","alert","addCategory","key","index","updatedCheckedArray","updatedExpandedArray","updateMultipleCategories","ids","checkedIdArray","getInitialData","products","AddProductModal","handleSave","handleProductInputs","productState","description","Check","readOnly","EditProductModal","file","encType","ProductScreen","productImage","setProduct","editProductModal","setEditProductModal","handleCloseEdit","files","form","FormData","append","addProduct","handleSaveEdit","updateInfo","handleRemoveProduct","id","delete","deleteProductById","productModal","setProductModal","productDetails","setProductDetails","handleShowProductModal","handleCloseShowProductModal","sticky","striped","responsive","fontSize","p","handleShowEdit","marginBottom","src","fileName","alt","renderProductDetailsModal","LoginScreen","setLog","logError","setLogError","handleLogInputs","span","offset","token","setItem","JSON","stringify","login","HomeScreen","App","parse","path","initialState","role","authenticating","regInitialState","buildNewCategoryList","newCategoryList","undefined","cat","newCategory","errors","initState","middleware","thunk","reducer","combineReducers","action","updatedCats","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ed6dd7c.chunk.js","sourcesContent":["import { Route, Redirect } from \"react-router-dom\";\r\n\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n    return (\r\n        <Route {...rest} component={(props) => {\r\n            const token = localStorage.getItem('token');\r\n            if (token) {\r\n                return <Component {...props} />\r\n            } else {\r\n                return <Redirect to={'/login'} />\r\n            }\r\n        }}/>\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","\r\n\r\nexport const NoLogMenuItems = [\r\n    {\r\n        title: 'Login',\r\n        url: 'login',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title: 'Register',\r\n        url: 'register',\r\n        cName: 'nav-links'\r\n    }\r\n];\r\n\r\n// export const LoggedMenuItems = [\r\n//     {\r\n//         title: 'Home',\r\n//         url: '/',\r\n//         cName: 'nav-links'\r\n//     },\r\n//     {\r\n//         title: 'Logout',\r\n//         url: 'logout',\r\n//         cName: 'nav-links'\r\n//     },\r\n// ];","\r\n// ~~~~~~~~~~~~~~~~~~ Admin User ~~~~~~~~~~~~~~~~~~\r\n\r\n// Admin Login\r\nexport const ADMIN_LOGIN_REQUEST = \"ADMIN_LOGIN_REQUEST\";\r\nexport const ADMIN_LOGIN_SUCCESS = \"ADMIN_LOGIN_SUCCESS\";\r\nexport const ADMIN_LOGIN_FAIL = \"ADMIN_LOGIN_FAIL\";\r\n\r\n// Admin Logout\r\nexport const ADMIN_LOGOUT_REQUEST = \"ADMIN_LOGOUT_REQUEST\";\r\nexport const ADMIN_LOGOUT_SUCCESS = \"ADMIN_LOGOUT_SUCCESS\";\r\nexport const ADMIN_LOGOUT_FAIL = \"ADMIN_LOGOUT_FAIL\";\r\n\r\n// Admin Registration\r\nexport const ADMIN_REGISTRATION_REQUEST = \"ADMIN_REGISTRATION_REQUEST\";\r\nexport const ADMIN_REGISTRATION_SUCCESS = \"ADMIN_REGISTRATION_SUCCESS\";\r\nexport const ADMIN_REGISTRATION_FAIL = \"ADMIN_REGISTRATION_FAIL\";\r\n\r\n// ~~~~~~~~~~~~~~~~~~ Categories ~~~~~~~~~~~~~~~~~~\r\n\r\n// Get Categories\r\nexport const GET_ALL_CATEGORIES_REQUEST = \"GET_ALL_CATEGORIES_REQUEST\";\r\nexport const GET_ALL_CATEGORIES_SUCCESS = \"GET_ALL_CATEGORIES_SUCCESS\";\r\nexport const GET_ALL_CATEGORIES_FAIL = \"GET_ALL_CATEGORIES_FAIL\";\r\n\r\n// Create Category\r\nexport const ADD_NEW_CATEGORY_REQUEST = \"ADD_NEW_CATEGORY_REQUEST\";\r\nexport const ADD_NEW_CATEGORY_SUCCESS = \"ADD_NEW_CATEGORY_SUCCESS\";\r\nexport const ADD_NEW_CATEGORY_FAIL = \"ADD_NEW_CATEGORY_FAIL\";\r\n\r\n// Update Categories\r\nexport const UPDATE_CATEGORIES_REQUEST = \"UPDATE_CATEGORIES_REQUEST\";\r\nexport const UPDATE_CATEGORIES_SUCCESS = \"UPDATE_CATEGORIES_SUCCESS\";\r\nexport const UPDATE_CATEGORIES_FAIL = \"UPDATE_CATEGORIES_FAIL\";\r\n\r\n// Delete Categories\r\nexport const DELETE_CATEGORIES_REQUEST = \"DELETE_CATEGORIES_REQUEST\";\r\nexport const DELETE_CATEGORIES_SUCCESS = \"DELETE_CATEGORIES_SUCCESS\";\r\nexport const DELETE_CATEGORIES_FAIL = \"DELETE_CATEGORIES_FAIL\";\r\n\r\n// ~~~~~~~~~~~~~~~~~~ Products ~~~~~~~~~~~~~~~~~~\r\n\r\n// Get Products\r\nexport const GET_ALL_PRODUCTS_REQUEST = \"GET_ALL_PRODUCTS_REQUEST\";\r\nexport const GET_ALL_PRODUCTS_SUCCESS = \"GET_ALL_PRODUCTS_SUCCESS\";\r\nexport const GET_ALL_PRODUCTS_FAIL = \"GET_ALL_PRODUCTS_FAIL\";\r\n\r\n// Create Products\r\nexport const ADD_NEW_PRODUCT_REQUEST = \"ADD_NEW_PRODUCT_REQUEST\";\r\nexport const ADD_NEW_PRODUCT_SUCCESS = \"ADD_NEW_PRODUCT_SUCCESS\";\r\nexport const ADD_NEW_PRODUCT_FAIL = \"ADD_NEW_PRODUCT_FAIL\";\r\n\r\n// Delete Products\r\nexport const DELETE_PRODUCT_BY_ID_REQUEST = \"DELETE_PRODUCT_BY_ID_REQUEST\";\r\nexport const DELETE_PRODUCT_BY_ID_SUCCESS = \"DELETE_PRODUCT_BY_ID_SUCCESS\";\r\nexport const DELETE_PRODUCT_BY_ID_FAILURE = \"DELETE_PRODUCT_BY_ID_FAILURE\";\r\n\r\n// ~~~~~~~~~~~~~~~~~~ Initial Data ~~~~~~~~~~~~~~~~~~\r\n\r\n// Get Initial Data\r\nexport const GET_INITIAL_DATA_REQUEST = \"GET_INITIAL_DATA_REQUEST\";\r\nexport const GET_INITIAL_DATA_SUCCESS = \"GET_INITIAL_DATA_SUCCESS\";\r\nexport const GET_INITIAL_DATA_FAIL = \"GET_INITIAL_DATA_FAIL\";\r\n\r\n// ~~~~~~~~~~~~~~~~~~ Get Orders ~~~~~~~~~~~~~~~~~~\r\nexport const GET_CUSTOMER_ORDERS_REQUEST = 'GET_CUSTOMER_ORDERS_REQUEST';\r\nexport const GET_CUSTOMER_ORDERS_SUCCESS = 'GET_CUSTOMER_ORDERS_SUCCESS';\r\nexport const GET_CUSTOMER_ORDERS_FAILURE = 'GET_CUSTOMER_ORDERS_FAILURE';\r\n\r\n// ~~~~~~~~~~~~~~~~~~ Update Orders ~~~~~~~~~~~~~~~~~~\r\nexport const UPDATE_CUSTOMER_ORDER_REQUEST = 'UPDATE_CUSTOMER_ORDER_REQUEST';\r\nexport const UPDATE_CUSTOMER_ORDER_SUCCESS = 'UPDATE_CUSTOMER_ORDER_SUCCESS';\r\nexport const UPDATE_CUSTOMER_ORDER_FAILURE = 'UPDATE_CUSTOMER_ORDER_FAILURE';\r\n\r\n","import axios from 'axios';\r\nimport { api } from '../urlConfig';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: api\r\n})\r\n\r\nexport default axiosInstance;","\r\nexport const api = process.env.NODE_ENV !== 'production'\r\n    ? 'http://localhost:8000/api'\r\n    : '/api'\r\n\r\nexport const generatePublicUrl = (fileName) => {\r\n    // console.log(process.env.NODE_ENV);    \r\n    const location = process.env.NODE_ENV !== 'production'\r\n        ? `http://localhost:8000/public/${fileName}`\r\n        : `/public/${fileName}`\r\n    return location;\r\n}\r\n\r\n\r\n","import { useState } from \"react\";\r\nimport './Navbar.css';\r\n\r\n// Routing\r\nimport { Link } from 'react-router-dom'\r\n\r\n// Components\r\nimport { NoLogMenuItems } from './MenuItems';\r\n\r\n// Redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { logout } from '../../redux/actions/adminAuth.actions'\r\n\r\nconst NavBar = () => {\r\n\r\n    const auth = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    const [clicked, setClicked] = useState(false)\r\n    const handleClick = () => {\r\n        if (clicked) {\r\n            setClicked(false)\r\n        } else {\r\n            setClicked(true)\r\n        }\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <nav className=\"NavbarItems\">\r\n            <div className=\"navbar-logo\">\r\n                <Link to='/' className=\"navbar-logo-link\"><h2>Admin</h2></Link>\r\n            </div>\r\n            <div className=\"menu-icon\" onClick={handleClick}>\r\n                <i className={clicked ? 'fas fa-times' : 'fas fa-bars'}></i>\r\n            </div>\r\n            <ul className={clicked ? 'nav-menu active' : 'nav-menu'}>\r\n                {\r\n                    !auth.authenticate\r\n                        ? NoLogMenuItems.map((item, idx) => {\r\n                            return (\r\n                                <Link key={idx} className={item.cName} to={item.url}>{item.title}</Link>\r\n                            )\r\n                        })\r\n                        : <>\r\n                            <Link className=\"nav-links\" to='/'>Home</Link>\r\n                            <li>\r\n                                <span onClick={handleLogout} className=\"nav-links\">Logout</span>\r\n                            </li>\r\n                        </>\r\n                }\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import * as actionTypes from '../constants/adminConstants';\r\nimport axiosInstance from '../../helpers/axios';\r\n// import axios from 'axios';\r\n\r\n\r\nexport const register = (user) => {\r\n    return async (dispatch) => {\r\n\r\n        dispatch({\r\n            type: actionTypes.ADMIN_REGISTRATION_REQUEST,\r\n            payload: {\r\n                ...user\r\n            }\r\n        });\r\n\r\n        await axiosInstance.post(`/admin/register`, { ...user }, { withCredentials: true })\r\n            .then(res => {\r\n                // console.log(res.data);\r\n                if (res.data.message) {\r\n                    const { message } = res.data;\r\n                    // console.log(message);\r\n                    dispatch({\r\n                        type: actionTypes.ADMIN_REGISTRATION_SUCCESS,\r\n                        payload: {\r\n                            message\r\n                        }\r\n                    })\r\n                } else {\r\n                    // console.log(\"number 1\");\r\n                    dispatch({\r\n                        type: actionTypes.ADMIN_REGISTRATION_FAIL,\r\n                        payload: {\r\n                            error: res.data\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                // console.log(\"number 2\");\r\n                // if (err) {\r\n                //     console.log(err.response.data.error);\r\n                // }\r\n                dispatch({\r\n                    type: actionTypes.ADMIN_REGISTRATION_FAIL,\r\n                    payload: {\r\n                        error: err.response.data.error\r\n                    }\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const login = (user) => {\r\n    return async (dispatch) => {\r\n\r\n        dispatch({\r\n            type: actionTypes.ADMIN_LOGIN_REQUEST,\r\n            payload: {\r\n                ...user\r\n            }\r\n        });\r\n\r\n        await axiosInstance.post(`/admin/login`, { ...user }, { withCredentials: true })\r\n            .then(res => {\r\n                // console.log(res.data);\r\n                if (res.data.message) {\r\n                    const { token, user } = res.data;\r\n                    localStorage.setItem('token', token);\r\n                    localStorage.setItem('user', JSON.stringify(user));\r\n                    dispatch({\r\n                        type: actionTypes.ADMIN_LOGIN_SUCCESS,\r\n                        payload: {\r\n                            token, user\r\n                        }\r\n                    })\r\n                } else {\r\n                    // console.log(res.data);\r\n                    dispatch({\r\n                        type: actionTypes.ADMIN_LOGIN_FAIL,\r\n                        payload: res.data\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                // console.log(err.response.data);\r\n                dispatch({\r\n                    type: actionTypes.ADMIN_LOGIN_FAIL,\r\n                    payload: err.response.data\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport const isUserLoggedIn = () => {\r\n    return async (dispatch) => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (user) {\r\n            dispatch({\r\n                type: actionTypes.ADMIN_LOGIN_SUCCESS,\r\n                payload: {\r\n                    user\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n// export const isUserLoggedIn = () => {\r\n//     return async (dispatch) => {\r\n//         const token = localStorage.getItem('token');\r\n//         if (token) {\r\n//             const user = JSON.parse(localStorage.getItem('user'));\r\n//             dispatch({\r\n//                 type: actionTypes.ADMIN_LOGIN_SUCCESS,\r\n//                 payload: {\r\n//                     token, user\r\n//                 }\r\n//             })\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport const logout = () => {\r\n    return async (dispatch) => {\r\n\r\n        dispatch({\r\n            type: actionTypes.ADMIN_LOGOUT_REQUEST\r\n        });\r\n\r\n        // const token = localStorage.getItem('token');\r\n\r\n        await axiosInstance.get(`/admin/logout`, { withCredentials: true })\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    // console.log(\"success\");\r\n                    localStorage.clear();\r\n                    dispatch({\r\n                        type: actionTypes.ADMIN_LOGOUT_SUCCESS\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: actionTypes.ADMIN_LOGOUT_FAIL,\r\n                        payload: res.data.error\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                // console.log(err.response.data);\r\n                localStorage.clear();\r\n                dispatch({\r\n                    type: actionTypes.ADMIN_LOGOUT_FAIL,\r\n                    payload: err.response.data\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\n// Routing\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// CSS\r\nimport './Layout.css';\r\n\r\n// Bootstrap Components\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n// Components\r\nimport NavBar from '../Navbar/NavBar';\r\n\r\nconst Layout = (props) => {\r\n    return (\r\n        <>\r\n            <NavBar />\r\n            {\r\n                props.sidebar\r\n                    ? <Container fluid>\r\n                        <Row>\r\n                            <Col md={2} className=\"sidebar pt-2\">\r\n\r\n                                <ul className=\"sidebar-nav-list\">\r\n                                    <li className=\"sidebar-links\"><NavLink exact to={`/`}>Home</NavLink></li>\r\n                                    <li className=\"sidebar-links\"><NavLink to={`/categories`}>Categories</NavLink></li>\r\n                                    <li className=\"sidebar-links\"><NavLink to={`/products`}>Products</NavLink></li>\r\n                                    <li className=\"sidebar-links\"><NavLink to={`/current-orders`}>Current Orders</NavLink></li>\r\n                                    <li className=\"sidebar-links\"><NavLink to={`/complete-orders`}>Complete Orders</NavLink></li>\r\n                                </ul>\r\n                            </Col>\r\n                            <Col md={10} className=\"main-container pt-2\">\r\n                                {props.children}\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                    : props.children\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Layout;","import { useState } from 'react';\r\n\r\n// CSS\r\nimport './OrderScreenCard.css'\r\n\r\n// Components\r\n\r\n// Redux\r\n\r\n\r\nconst OrderScreenCard = (props) => {\r\n\r\n    // const [qty, setQty] = useState(props.qty);\r\n\r\n    const initialProduct = {\r\n        _id: props.product._id,\r\n        name: props.name,\r\n        price: props.price,\r\n        // description: props.description,\r\n        inStock: props.inStock,\r\n        measurement: props.measurement,\r\n        quantity: props.qty\r\n    }\r\n\r\n    const [product, setProduct] = useState(initialProduct)\r\n\r\n    return (\r\n        <>\r\n            <td style={{\r\n                width: '30%',\r\n                verticalAlign: 'middle'\r\n            }}>\r\n                {product.name}\r\n            </td>\r\n            <td style={{\r\n                width: '10%',\r\n                textAlign: 'center',\r\n                verticalAlign: 'middle'\r\n            }}>\r\n                ${product.price.toFixed(2)} / {product.measurement}\r\n            </td>\r\n            <td style={{\r\n                width: '10%',\r\n                textAlign: 'center',\r\n                verticalAlign: 'middle'\r\n            }}>\r\n                {product.quantity}\r\n            </td>\r\n            <td style={{\r\n                width: '10%',\r\n                textAlign: 'center',\r\n                verticalAlign: 'middle'\r\n            }}>\r\n                {product.inStock ? \" In Stock.\" : \" Out Of Stock.\"}\r\n            </td>            \r\n        </>\r\n    )\r\n}\r\nexport default OrderScreenCard;","\r\n\r\nimport './Button.css';\r\n\r\nconst STYLES = [\r\n    'btn--primary',\r\n    'btn--outline'\r\n]\r\n\r\nconst SIZES = [\r\n    'btn--med',\r\n    'btn--large'\r\n]\r\n\r\nexport const Button = ({\r\n    children,\r\n    type,\r\n    onClick,\r\n    buttonStyle,\r\n    buttonSize\r\n}) => {\r\n    const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonSize : STYLES[0]\r\n\r\n    const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0]\r\n\r\n    return(\r\n        <button className={`btn ${checkButtonStyle} ${checkButtonSize}`} onClick = {onClick} type={type}>\r\n            {children}\r\n        </button>\r\n    )\r\n}","import * as actionTypes from '../constants/adminConstants'\r\nimport axiosInstance from \"../../helpers/axios\";\r\n\r\nexport const getCustomerOrders = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.GET_CUSTOMER_ORDERS_REQUEST });\r\n        try {\r\n            const res = await axiosInstance.get(\"/orders/all\", { withCredentials: true });\r\n            if (res.status === 200) {\r\n                const { orders } = res.data;\r\n                // console.log('getOrders', res.data);\r\n                dispatch({\r\n                    type: actionTypes.GET_CUSTOMER_ORDERS_SUCCESS,\r\n                    payload: { orders },\r\n                });\r\n            } else {\r\n                const { error } = res.data;\r\n                dispatch({\r\n                    type: actionTypes.GET_CUSTOMER_ORDERS_FAILURE,\r\n                    payload: { error },\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n};\r\n\r\nexport const updateOrder = (payload) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.UPDATE_CUSTOMER_ORDER_REQUEST });\r\n        try {\r\n            const res = await axiosInstance.put(\"/orders/update\", payload, { withCredentials: true });\r\n            if (res.status === 201) {\r\n                dispatch({ type: actionTypes.UPDATE_CUSTOMER_ORDER_SUCCESS });\r\n                dispatch(getCustomerOrders());\r\n            } else {\r\n                const { error } = res.data;\r\n                dispatch({\r\n                    type: actionTypes.UPDATE_CUSTOMER_ORDER_FAILURE,\r\n                    payload: { error },\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n};","// React\r\nimport { useEffect, useState } from 'react';\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// Components\r\nimport Layout from '../../components/Layout/Layout';\r\nimport OrderScreenCard from '../../components/OrderScreenCard/OrderScreenCard';\r\n\r\n// React-Bootstrap\r\nimport { Table } from 'react-bootstrap';\r\n\r\n// CSS\r\nimport './CurrentOrderScreen.css'\r\nimport { Button } from '../../components/Button/Button';\r\nimport { getCustomerOrders, updateOrder } from '../../redux/actions/order.actions';\r\n\r\n\r\n\r\nconst CurrentOrdersScreen = (props) => {\r\n\r\n    const orders = useSelector((state) => state.orders.orders);\r\n    const dispatch = useDispatch();\r\n\r\n    const [selectedOrder, setSelectedOrder] = useState({})\r\n    const [type, setType] = useState('');\r\n    const [reloadIt, setReloadIt] = useState(false);\r\n\r\n    const handleShow = (order) => {\r\n        const thisOrder = order\r\n        if (selectedOrder._id === order._id) {\r\n            setSelectedOrder({})\r\n        } else {\r\n            setSelectedOrder(thisOrder);\r\n        }\r\n        setType(getNextOrderStatus(order));\r\n        // setShow(!show);\r\n    }\r\n\r\n    const handleUpdateOrder = (orderId, type) => {\r\n        // console.log('orderId', orderId);\r\n        // console.log('type', type);\r\n        const payload = {\r\n            orderId,\r\n            type\r\n        }\r\n        dispatch(updateOrder(payload))\r\n        setReloadIt(!reloadIt);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getCustomerOrders());\r\n    }, [reloadIt])\r\n\r\n    const makeDate = (date) => {\r\n        // console.log(typeof orderDate.createdAt);\r\n        var newDate = new Date(date);\r\n        var month = newDate.getMonth() + 1;\r\n        var day = newDate.getDate();\r\n        var year = newDate.getFullYear();\r\n        // console.log(`${month}/${day}/${year}`);\r\n        return `${month}/${day}/${year}`\r\n    }\r\n\r\n    const getCurrentOrderStatus = (order) => {\r\n        var currentStatus;\r\n        var orderStatus = order.orderStatus;\r\n        for (var i = 0; i <= orderStatus.length - 1; i++) {\r\n            // console.log(orderStatus[i]);\r\n            if (!orderStatus[orderStatus.length - 1].isCompleted) {\r\n                if (orderStatus[i].isCompleted === false) {\r\n                    currentStatus = orderStatus[i - 1].type;\r\n                    break;\r\n                }\r\n            } else {\r\n                currentStatus = \"delivered\"\r\n            }\r\n        }\r\n        return currentStatus;\r\n    }\r\n\r\n    const getNextOrderStatus = (order) => {\r\n        var nextStatus;\r\n        var orderStatus = order.orderStatus;\r\n        for (var i = 0; i <= orderStatus.length - 1; i++) {\r\n            // console.log(orderStatus[i]);\r\n            if (!order.orderStatus[orderStatus.length - 1].isCompleted) {\r\n                if (orderStatus[i].isCompleted === true) {\r\n                    nextStatus = orderStatus[i + 1].type;\r\n                }\r\n            }\r\n\r\n        }\r\n        return nextStatus;\r\n    }\r\n\r\n    // const sortAscending = () => {\r\n    //     [...orders].sort((a, b) => a - b);\r\n    // }\r\n\r\n    return (\r\n        <Layout sidebar>\r\n            <div style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignContent: 'center',\r\n                flexDirection: 'column',\r\n                margin: '10px',\r\n                padding: '3px'\r\n            }}>\r\n                {\r\n                    orders\r\n                        ? orders.map((order, idx) => {\r\n                            return (\r\n                                getCurrentOrderStatus(order) !== 'delivered'\r\n                                    ? <Table\r\n                                        key={idx}\r\n                                        bordered\r\n                                        style={{\r\n                                            width: '95%',\r\n                                            alignSelf: 'center'\r\n                                        }}\r\n                                    >\r\n                                        <thead onClick={() => handleShow(order)}>\r\n                                            <tr>\r\n                                                <th colSpan=''\r\n                                                    style={{\r\n                                                        width: '30%',\r\n                                                        verticalAlign: 'middle'\r\n                                                    }}>\r\n                                                    Order # : {order._id}\r\n                                                </th>\r\n                                                <th colSpan='' style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                    Order Date: {makeDate(order.createdAt)}\r\n                                                </th>\r\n                                                <th style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                    Current Status: {getCurrentOrderStatus(order)}\r\n\r\n                                                </th>\r\n                                                {\r\n                                                    order.orderStatus.map((status, idx) => {\r\n                                                        return (status.type === \"delivered\" && status.date\r\n                                                            ? <th key={idx} style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                                Delivered On: {makeDate(status.date)}\r\n                                                            </th>\r\n                                                            : status.type === \"delivered\"\r\n                                                                ? <th key={idx} style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                                    Not Delivered\r\n                                                                </th>\r\n                                                                : null\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody className={selectedOrder._id === order._id ? 'tableBody show' : 'tableBody'}>\r\n                                            <tr>\r\n                                                <th >Product</th>\r\n                                                <th style={{ textAlign: 'center' }}>Purchased Price</th>\r\n                                                {/* <th >Description</th> */}\r\n                                                <th style={{ textAlign: 'center' }}>Quantity</th>\r\n                                                <th style={{ textAlign: 'center' }}>Stock</th>\r\n                                            </tr>\r\n                                            {\r\n                                                order.items.map((item, idx) => {\r\n                                                    return (\r\n                                                        <tr key={idx}>\r\n                                                            <OrderScreenCard\r\n                                                                product={item.productId}\r\n                                                                name={item.productId.name}\r\n                                                                price={item.payablePrice}\r\n                                                                measurement={item.productId.measurement}\r\n                                                                // description={item.productId.description}\r\n                                                                inStock={item.productId.inStock}\r\n                                                                qty={item.purchasedQty}\r\n                                                            />\r\n                                                            {/* <td>{item.productId.name}</td>\r\n                                                    <td>{item.purchasedQty} {item.productId.measurement}</td> */}\r\n                                                        </tr>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <tr style={{ textAlign: 'end' }}>\r\n\r\n                                                {\r\n                                                    getCurrentOrderStatus(order) !== 'delivered'\r\n                                                        ?\r\n                                                        <>\r\n                                                            <th style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                                Order Status:\r\n                                                                <select\r\n                                                                    onChange={(e) => setType(e.target.value)}\r\n                                                                    style={{ marginLeft: '10px', padding: '4px' }} name=\"orderStatus\">\r\n                                                                    {\r\n                                                                        order.orderStatus.map((status, idx) => {\r\n                                                                            return (\r\n                                                                                !status.isCompleted\r\n                                                                                    ? <option\r\n                                                                                        key={idx}\r\n                                                                                        value={status.type}\r\n                                                                                    >\r\n                                                                                        {status.type}\r\n                                                                                    </option>\r\n                                                                                    : null\r\n                                                                            )\r\n                                                                        })\r\n                                                                    }\r\n                                                                </select>\r\n                                                            </th>\r\n                                                            <td colSpan='3'>\r\n                                                                <Button\r\n                                                                    className='btn btn--primary btn--sm'\r\n                                                                    // style={{ backgroundColor: 'orangered' }}\r\n                                                                    onClick={() => handleUpdateOrder(order._id, type)}\r\n                                                                >\r\n                                                                    Update Order\r\n                                                                </Button>\r\n                                                            </td>\r\n                                                        </>\r\n                                                        : null\r\n                                                }\r\n\r\n\r\n\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                    : null\r\n                            )\r\n                        })\r\n                        : null\r\n                }\r\n\r\n            </div>\r\n            {/* {\r\n                orders.map((order, idx) => {\r\n                    console.log(order);\r\n                    return (\r\n                        <p key={idx}> Order#: {order._id}</p>\r\n                    )\r\n                })\r\n            } */}\r\n        </Layout >\r\n    );\r\n};\r\n\r\nexport default CurrentOrdersScreen;","// React\r\nimport { useEffect, useState } from 'react';\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// Components\r\nimport Layout from '../../components/Layout/Layout';\r\nimport OrderScreenCard from '../../components/OrderScreenCard/OrderScreenCard';\r\n\r\n// React-Bootstrap\r\nimport { Table } from 'react-bootstrap';\r\n\r\n// CSS\r\nimport './CompleteOrderScreen.css'\r\nimport { Button } from '../../components/Button/Button';\r\nimport { getCustomerOrders, updateOrder } from '../../redux/actions/order.actions';\r\n\r\n\r\n\r\nconst CompleteOrdersScreen = (props) => {\r\n\r\n    const orders = useSelector((state) => state.orders.orders);\r\n    const dispatch = useDispatch();\r\n\r\n    const [selectedOrder, setSelectedOrder] = useState({})\r\n    const [type, setType] = useState('');\r\n    const [reloadIt, setReloadIt] = useState(false);\r\n\r\n    const handleShow = (order) => {\r\n        const thisOrder = order\r\n        if (selectedOrder._id === order._id) {\r\n            setSelectedOrder({})\r\n        } else {\r\n            setSelectedOrder(thisOrder);\r\n        }\r\n        setType(getNextOrderStatus(order));\r\n        // setShow(!show);\r\n    }\r\n\r\n    const handleUpdateOrder = (orderId, type) => {\r\n        // console.log('orderId', orderId);\r\n        // console.log('type', type);\r\n        const payload = {\r\n            orderId,\r\n            type\r\n        }\r\n        dispatch(updateOrder(payload))\r\n        setReloadIt(!reloadIt);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getCustomerOrders());\r\n    }, [reloadIt])\r\n\r\n    const makeDate = (date) => {\r\n        // console.log(typeof orderDate.createdAt);\r\n        var newDate = new Date(date);\r\n        var month = newDate.getMonth() + 1;\r\n        var day = newDate.getDate();\r\n        var year = newDate.getFullYear();\r\n        // console.log(`${month}/${day}/${year}`);\r\n        return `${month}/${day}/${year}`\r\n    }\r\n\r\n    const getCurrentOrderStatus = (order) => {\r\n        var currentStatus;\r\n        var orderStatus = order.orderStatus;\r\n        for (var i = 0; i <= orderStatus.length - 1; i++) {\r\n            // console.log(orderStatus[i]);\r\n            if (!orderStatus[orderStatus.length - 1].isCompleted) {\r\n                if (orderStatus[i].isCompleted === false) {\r\n                    currentStatus = orderStatus[i - 1].type;\r\n                    break;\r\n                }\r\n            } else {\r\n                currentStatus = \"delivered\"\r\n            }\r\n        }\r\n        return currentStatus;\r\n    }\r\n\r\n    const getNextOrderStatus = (order) => {\r\n        var nextStatus;\r\n        var orderStatus = order.orderStatus;\r\n        for (var i = 0; i <= orderStatus.length - 1; i++) {\r\n            // console.log(orderStatus[i]);\r\n            if (!order.orderStatus[orderStatus.length - 1].isCompleted) {\r\n                if (orderStatus[i].isCompleted === true) {\r\n                    nextStatus = orderStatus[i + 1].type;\r\n                }\r\n            }\r\n\r\n        }\r\n        return nextStatus;\r\n    }\r\n\r\n    return (\r\n        <Layout sidebar>\r\n            <div style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignContent: 'center',\r\n                flexDirection: 'column',\r\n                margin: '10px',\r\n                padding: '3px'\r\n            }}>\r\n                {\r\n                    orders\r\n                        ? orders.map((order, idx) => {\r\n                            return (\r\n                                getCurrentOrderStatus(order) === 'delivered'\r\n                                    ? <Table\r\n                                        key={idx}\r\n                                        bordered\r\n                                        style={{\r\n                                            width: '95%',\r\n                                            alignSelf: 'center'\r\n                                        }}\r\n                                    >\r\n                                        <thead onClick={() => handleShow(order)}>\r\n                                            <tr>\r\n                                                <th colSpan=''\r\n                                                    style={{\r\n                                                        width: '30%',\r\n                                                        verticalAlign: 'middle'\r\n                                                    }}>\r\n                                                    Order # : {order._id}\r\n                                                </th>\r\n                                                <th colSpan='' style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                    Order Date: {makeDate(order.createdAt)}\r\n                                                </th>\r\n                                                <th style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                    Current Status: {getCurrentOrderStatus(order)}\r\n\r\n                                                </th>\r\n                                                {\r\n                                                    order.orderStatus.map((status, idx) => {\r\n                                                        return (status.type === \"delivered\" && status.date\r\n                                                            ? <th key={idx} style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                                Delivered On: {makeDate(status.date)}\r\n                                                            </th>\r\n                                                            : status.type === \"delivered\"\r\n                                                                ? <th key={idx} style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                                    Not Delivered\r\n                                                                </th>\r\n                                                                : null\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody className={selectedOrder._id === order._id ? 'tableBody show' : 'tableBody'}>\r\n                                            <tr>\r\n                                                <th >Product</th>\r\n                                                <th style={{ textAlign: 'center' }}>Purchased Price</th>\r\n                                                {/* <th >Description</th> */}\r\n                                                <th style={{ textAlign: 'center' }}>Quantity</th>\r\n                                                <th style={{ textAlign: 'center' }}>Stock</th>\r\n                                            </tr>\r\n                                            {\r\n                                                order.items.map((item, idx) => {\r\n                                                    return (\r\n                                                        <tr key={idx}>\r\n                                                            <OrderScreenCard\r\n                                                                product={item.productId}\r\n                                                                name={item.productId.name}\r\n                                                                price={item.payablePrice}\r\n                                                                measurement={item.productId.measurement}\r\n                                                                // description={item.productId.description}\r\n                                                                inStock={item.productId.inStock}\r\n                                                                qty={item.purchasedQty}\r\n                                                            />\r\n                                                            {/* <td>{item.productId.name}</td>\r\n                                                    <td>{item.purchasedQty} {item.productId.measurement}</td> */}\r\n                                                        </tr>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <tr style={{ textAlign: 'end' }}>\r\n\r\n                                                {\r\n                                                    getCurrentOrderStatus(order) !== 'delivered'\r\n                                                        ?\r\n                                                        <>\r\n                                                            <th style={{ textAlign: 'center', verticalAlign: 'middle', width: '10%' }}>\r\n                                                                Order Status:\r\n                                                                <select\r\n                                                                    onChange={(e) => setType(e.target.value)}\r\n                                                                    style={{ marginLeft: '10px', padding: '4px' }} name=\"orderStatus\">\r\n                                                                    {\r\n                                                                        order.orderStatus.map((status, idx) => {\r\n                                                                            return (\r\n                                                                                !status.isCompleted\r\n                                                                                    ? <option\r\n                                                                                        key={idx}\r\n                                                                                        value={status.type}\r\n                                                                                    >\r\n                                                                                        {status.type}\r\n                                                                                    </option>\r\n                                                                                    : null\r\n                                                                            )\r\n                                                                        })\r\n                                                                    }\r\n                                                                </select>\r\n                                                            </th>\r\n                                                            <td colSpan='3'>\r\n                                                                <Button\r\n                                                                    className='btn btn--primary btn--sm'\r\n                                                                    // style={{ backgroundColor: 'orangered' }}\r\n                                                                    onClick={() => handleUpdateOrder(order._id, type)}\r\n                                                                >\r\n                                                                    Update Order\r\n                                                                </Button>\r\n                                                            </td>\r\n                                                        </>\r\n                                                        : null\r\n                                                }\r\n\r\n\r\n\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                    : null\r\n                            )\r\n                        })\r\n                        : null\r\n                }\r\n\r\n            </div>\r\n            {/* {\r\n                orders.map((order, idx) => {\r\n                    console.log(order);\r\n                    return (\r\n                        <p key={idx}> Order#: {order._id}</p>\r\n                    )\r\n                })\r\n            } */}\r\n        </Layout >\r\n    );\r\n};\r\n\r\nexport default CompleteOrdersScreen;","import { Form } from 'react-bootstrap';\r\n\r\n\r\n/**\r\n * @author\r\n * @function InputDefault\r\n */\r\n\r\nconst InputDefault = (props) => {\r\n    return (\r\n        <>\r\n            <Form.Label>{props.label}</Form.Label>\r\n            <Form.Control\r\n                type={props.type}\r\n                name={props.name}\r\n                placeholder={props.placeholder}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InputDefault;\r\n\r\n\r\n//  controlId: formBasic{field-type-here} / formGridText{field-type-here}","import { Redirect } from 'react-router-dom';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n// Bootstrap Components\r\nimport { Container, Row, Form, Col, Button } from 'react-bootstrap';\r\n\r\n// Components\r\nimport Layout from '../../components/Layout/Layout';\r\nimport InputDefault from '../../components/UI/Inputs/InputDefault';\r\n\r\n// Redux\r\nimport { register } from '../../redux/actions/adminAuth.actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst RegisterScreen = () => {\r\n\r\n    const auth = useSelector(state => state.auth);\r\n    const regAuth = useSelector(state => state.regAuth);\r\n    const dispatch = useDispatch();\r\n\r\n    const initialReg = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        contactNumber: \"\",\r\n        // street1: \"\",\r\n        // street2: \"\",\r\n        // city: \"\",\r\n        // addressState: \"\",\r\n        // zip: \"\",\r\n    }\r\n    const [reg, setReg] = useState(initialReg);\r\n    const [regError, setRegError] = useState(initialReg);\r\n\r\n    const handleRegInputs = (e) => {\r\n        setReg({\r\n            ...reg,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const handleRegistration = (e) => {\r\n        e.preventDefault();\r\n        const user = {\r\n            firstName: reg.firstName,\r\n            lastName: reg.lastName,\r\n            email: reg.email,\r\n            password: reg.password,\r\n            confirmPassword: reg.confirmPassword,\r\n            contactNumber: reg.contactNumber,\r\n            // street1: reg.street1,\r\n            // street2: reg.street2,\r\n            // city: reg.city,\r\n            // addressState: reg.addressState,\r\n            // zip: reg.zip\r\n        }\r\n        dispatch(register(user))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (regAuth.error) {\r\n            if (typeof (regAuth.error.error) !== 'string') {\r\n                // console.log(regAuth.error.error);\r\n                // console.log(typeof (regAuth.error.error));\r\n                setRegError({\r\n                    firstName: regAuth.error.error.firstName,\r\n                    lastName: regAuth.error.error.lastName,\r\n                    email: regAuth.error.error.email,\r\n                    password: regAuth.error.error.password,\r\n                    confirmPassword: regAuth.error.error.confirmPassword,\r\n                    contactNumber: regAuth.error.error.contactNumber,\r\n                    // street1: regAuth.error.error.street1,\r\n                    // street2: regAuth.error.error.street2,\r\n                    // city: regAuth.error.error.city,\r\n                    // addressState: regAuth.error.error.addressState,\r\n                    // zip: regAuth.error.error.zip\r\n                })\r\n            } else {\r\n                // console.log(regAuth.error.error);\r\n                // console.log(typeof (regAuth.error.error));\r\n                setRegError({\r\n                    errorMessage: regAuth.error.error\r\n                })\r\n            }\r\n\r\n        }\r\n    }, [regAuth])\r\n\r\n    if (auth.authenticate) {\r\n        return <Redirect to={`/`} />\r\n    }\r\n\r\n    if (regAuth.loading) {\r\n        return <p>Loading...</p>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Layout>\r\n                <Container>\r\n                    <Row style={{ marginTop: '50px' }}>\r\n                        <Col>\r\n                            <Form onSubmit={handleRegistration}>\r\n\r\n                                <Form.Group style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                    <Form.Text className=\"text-danger font-weight-bold\">\r\n                                        {regError.errorMessage ? regError.errorMessage : \"\"}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} controlId=\"formBasicFirst\">\r\n                                        <InputDefault\r\n                                            name=\"firstName\"\r\n                                            label=\"First Name\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"First Name\"\r\n                                            value={reg.firstName}\r\n                                            onChange={handleRegInputs}\r\n                                        />\r\n                                        <Form.Text className=\"text-danger font-weight-bold\">\r\n                                            {regError.firstName ? regError.firstName.message : \"\"}\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} controlId=\"formBasicLast\">\r\n                                        <InputDefault\r\n                                            name=\"lastName\"\r\n                                            label=\"Last Name\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"Last Name\"\r\n                                            value={reg.lastName}\r\n                                            onChange={handleRegInputs}\r\n                                        />\r\n                                        <Form.Text className=\"text-danger font-weight-bold\">\r\n                                            {regError.lastName ? regError.lastName.message : \"\"}\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} controlId=\"formBasicEmail\">\r\n                                        <InputDefault\r\n                                            name=\"email\"\r\n                                            label=\"Email Address\"\r\n                                            type=\"email\"\r\n                                            placeholder=\"Email Address\"\r\n                                            value={reg.email}\r\n                                            onChange={handleRegInputs}\r\n                                        />\r\n                                        <Form.Text className=\"text-danger font-weight-bold\">\r\n                                            {regError.email ? regError.email.message : \"\"}\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} controlId=\"formBasicContactNum\">\r\n                                        <InputDefault\r\n                                            name=\"contactNumber\"\r\n                                            label=\"Contact Phone Number\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"555-555-5555\"\r\n                                            value={reg.contactNumber}\r\n                                            onChange={handleRegInputs}\r\n                                        />\r\n                                        <Form.Text className=\"text-danger font-weight-bold\">\r\n                                            {regError.contactNumber ? regError.contactNumber.message : \"\"}\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} controlId=\"formGridPass\">\r\n                                        <InputDefault\r\n                                            name=\"password\"\r\n                                            label=\"Password\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            value={reg.password}\r\n                                            onChange={handleRegInputs}\r\n                                        />\r\n                                        <Form.Text className=\"text-danger font-weight-bold\">\r\n                                            {regError.password ? regError.password.message : \"\"}\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} controlId=\"formGridCPass\">\r\n                                        <InputDefault\r\n                                            name=\"confirmPassword\"\r\n                                            label=\"Confirm Password\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"Confirm Password\"\r\n                                            value={reg.confirmPassword}\r\n                                            onChange={handleRegInputs}\r\n                                        />\r\n                                        <Form.Text className=\"text-danger font-weight-bold\">\r\n                                            {regError.confirmPassword ? regError.confirmPassword.message : \"\"}\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                {/* <Form.Group controlId=\"formGridAddress1\">\r\n                                    <InputDefault\r\n                                        name=\"street1\"\r\n                                        label=\"Address\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"1234 Main St\"\r\n                                        value={reg.street1}\r\n                                        onChange={handleRegInputs}\r\n                                    />\r\n                                    <Form.Text className=\"text-danger font-weight-bold\">\r\n                                        {regError.street1 ? regError.street1.message : \"\"}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"formGridAddress2\">\r\n                                    <InputDefault\r\n                                        name=\"street2\"\r\n                                        label=\"Address 2\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Apartment, studio, or floor\"\r\n                                        value={reg.street2}\r\n                                        onChange={handleRegInputs}\r\n                                    />\r\n                                    <Form.Text className=\"text-danger font-weight-bold\">\r\n                                        {regError.street2 ? regError.street2.message : \"\"}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n\r\n\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} controlId=\"formGridCity\">\r\n                                        <InputDefault\r\n                                            name=\"city\"\r\n                                            label=\"City\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"City\"\r\n                                            value={reg.city}\r\n                                            onChange={handleRegInputs}\r\n                                        />\r\n                                        <Form.Text className=\"text-danger font-weight-bold\">\r\n                                            {regError.city ? regError.city.message : \"\"}\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} controlId=\"formGridState\">\r\n                                        <InputDefault\r\n                                            name=\"addressState\"\r\n                                            label=\"State\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"State\"\r\n                                            value={reg.addressState}\r\n                                            onChange={handleRegInputs}\r\n                                        />\r\n                                        <Form.Text className=\"text-danger font-weight-bold\">\r\n                                            {regError.addressState ? regError.addressState.message : \"\"}\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} controlId=\"formGridZip\">\r\n                                        <InputDefault\r\n                                            name=\"zip\"\r\n                                            label=\"Zip\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"Zip Code\"\r\n                                            value={reg.zip}\r\n                                            onChange={handleRegInputs}\r\n                                        />\r\n                                        <Form.Text className=\"text-danger font-weight-bold\">\r\n                                            {regError.zip ? regError.zip.message : \"\"}\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                </Form.Row> */}\r\n\r\n                                <Form.Group style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                    <Button variant=\"primary\" type=\"submit\">\r\n                                        Submit\r\n                                    </Button>\r\n                                </Form.Group>\r\n\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Container>\r\n            </Layout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RegisterScreen;","import * as actionTypes from '../constants/adminConstants'\r\nimport axiosInstance from '../../helpers/axios';\r\n// import axios from \"axios\"\r\n\r\nexport const getAllCategories = () => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: actionTypes.GET_ALL_CATEGORIES_REQUEST\r\n        });\r\n\r\n        const res = await axiosInstance.get(`/categories`);\r\n        // console.log(res.data);\r\n        if (res.status === 200) {\r\n            const { categoryList } = res.data\r\n            dispatch({\r\n                type: actionTypes.GET_ALL_CATEGORIES_SUCCESS,\r\n                payload: { categoryList: categoryList }\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_ALL_CATEGORIES_FAIL,\r\n                payload: { error: res.data.error }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const addCategory = (cate) => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: actionTypes.ADD_NEW_CATEGORY_REQUEST\r\n        })\r\n\r\n        await axiosInstance.post(`/categories`, cate, { withCredentials: true })\r\n            .then(res => {\r\n                // console.log(\"res.data in the .then\");\r\n                // console.log(res.data);\r\n\r\n                dispatch({\r\n                    type: actionTypes.ADD_NEW_CATEGORY_SUCCESS,\r\n                    payload: { category: res.data }\r\n                })\r\n            })\r\n            .catch(err => {\r\n                // console.log(\"err in the .catch\");\r\n                // console.log(err.response);\r\n                dispatch({\r\n                    type: actionTypes.ADD_NEW_CATEGORY_FAIL,\r\n                    payload: err.response\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateMultipleCategories = (cate) => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: actionTypes.UPDATE_CATEGORIES_REQUEST\r\n        })\r\n\r\n        const res = await axiosInstance.post(`/categories/update-multiple`, cate);\r\n\r\n        if (res.status === 201) {\r\n            dispatch({\r\n                type: actionTypes.UPDATE_CATEGORIES_SUCCESS\r\n            });\r\n            dispatch(getAllCategories());\r\n        } else {\r\n\r\n            const { error } = res;\r\n\r\n            dispatch({\r\n                type: actionTypes.UPDATE_CATEGORIES_FAIL,\r\n                payload: { error }\r\n            })\r\n\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const deleteCategories = (ids) => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: actionTypes.DELETE_CATEGORIES_REQUEST\r\n        });\r\n\r\n        const res = await axiosInstance.post(`/categories/delete-multiple`, {\r\n            payload: {\r\n                ids\r\n            }\r\n        });\r\n\r\n        if (res.status === 201) {\r\n            dispatch({\r\n                type: actionTypes.DELETE_CATEGORIES_SUCCESS\r\n            });\r\n            dispatch(getAllCategories());\r\n        } else {\r\n            const { error } = res;\r\n            dispatch({\r\n                type: actionTypes.DELETE_CATEGORIES_FAIL,\r\n                payload: { error }\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\n// Bootstrap Components\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { Form } from 'react-bootstrap';\r\n\r\n// Components\r\nimport InputDefault from '../../components/UI/Inputs/InputDefault';\r\n\r\nconst CategoryForm = ({ inputs, handleInputChangeName, handleInputChangeParentId, categorySelectOptions }) => {\r\n    return (\r\n        <Form >\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controlId=\"formCategoryName\">\r\n                        <InputDefault\r\n                            name=\"name\"\r\n                            label=\"Category Name\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Category Name\"\r\n                            value={inputs.name}\r\n                            onChange={handleInputChangeName}\r\n                        />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                    <Form.Group controlId=\"formParentSelect\">\r\n                        <Form.Label>Select Parent Category</Form.Label>\r\n                        <Form.Row>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"parentId\"\r\n                                value={inputs.parentId}\r\n                                onChange={handleInputChangeParentId}\r\n                            >\r\n                                <option> </option>\r\n                                {\r\n                                    categorySelectOptions.map(option =>\r\n                                        <option key={option.value} value={option.value}>{option.name}</option>\r\n                                    )\r\n                                }\r\n                            </select>\r\n                        </Form.Row>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default CategoryForm;","\r\n// Components\r\nimport CategoryForm from '../../CategoryForm/CategoryForm';\r\n\r\n// Bootstrap Components\r\nimport { Modal, Form, Button, Row } from 'react-bootstrap';\r\n\r\n\r\nconst EditCategoryModal = (props) => {\r\n\r\n    const {\r\n        show,\r\n        size,\r\n        onHide,\r\n        expandedArray,\r\n        checkedArray,\r\n        categorySelectOptions,\r\n        handleEditCategoryInputs,\r\n        handleClose,\r\n        handleUpdate\r\n    } = props;\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            size={size}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            onHide={onHide}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Edit Category</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {/* Display expanded section if any are expanded */}\r\n                {\r\n                    expandedArray.length > 0\r\n                        ? <Row>\r\n                            <h5 style={{ paddingLeft: '20px' }}>Expanded</h5>\r\n                        </Row>\r\n                        : <p className='text-center'>Nothing Selected</p>\r\n                }\r\n                {\r\n                    expandedArray.length > 0 &&\r\n                    expandedArray.map((expandedItem, idx) =>\r\n                        <CategoryForm\r\n                            key={idx}\r\n                            inputs={expandedItem}\r\n                            handleInputChangeName={(e) => handleEditCategoryInputs('name', e.target.value, idx, 'expanded')}\r\n                            handleInputChangeParentId={(e) => handleEditCategoryInputs('parentId', e.target.value, idx, 'expanded')}\r\n                            categorySelectOptions={categorySelectOptions}\r\n                        />\r\n                    )\r\n                }\r\n                {/* Display checked section if any are checked */}\r\n                {\r\n                    checkedArray.length > 0\r\n                        ? <Row>\r\n                            <h5 style={{ paddingLeft: '20px' }}>Checked</h5>\r\n                        </Row>\r\n                        : null\r\n                }\r\n                {\r\n                    checkedArray.length > 0 &&\r\n                    checkedArray.map((checkedItem, idx) =>\r\n                        <CategoryForm\r\n                            key={idx}\r\n                            inputs={checkedItem}\r\n                            handleInputChangeName={(e) => handleEditCategoryInputs('name', e.target.value, idx, 'checked')}\r\n                            handleInputChangeParentId={(e) => handleEditCategoryInputs('parentId', e.target.value, idx, 'checked')}\r\n                            categorySelectOptions={categorySelectOptions}\r\n                        />\r\n                    )\r\n                }\r\n                <Form.Group className=\"d-flex justify-content-end border-top border-bottom py-2\">\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button className=\"ml-1\" onClick={handleUpdate} variant=\"primary\" type=\"submit\">\r\n                        Save\r\n                    </Button>\r\n                </Form.Group>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default EditCategoryModal;","\r\n// Components\r\nimport CategoryForm from '../../CategoryForm/CategoryForm';\r\n\r\n// Bootstrap Components\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\n\r\nconst AddCategoryModal = (props) => {\r\n\r\n    const {\r\n        show,\r\n        size,\r\n        onHide,\r\n        handleInputs,\r\n        category,\r\n        categorySelectOptions,\r\n        handleClose,\r\n        handleCreate\r\n    } = props;\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            size={size}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            onHide={onHide}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Create New Category</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <CategoryForm\r\n                    inputs={category}\r\n                    handleInputChangeName={handleInputs}\r\n                    handleInputChangeParentId={handleInputs}\r\n                    categorySelectOptions={categorySelectOptions}\r\n                />\r\n                <Form.Group className=\"d-flex justify-content-end border-top border-bottom py-2\">\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button className=\"ml-1\" onClick={handleCreate} variant=\"primary\" type=\"submit\">\r\n                        Save\r\n                    </Button>\r\n                </Form.Group>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default AddCategoryModal;","\r\n// Components\r\n\r\n// Bootstrap Components\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\n\r\nconst DeleteCategoryModal = (props) => {\r\n\r\n    const {\r\n        show,\r\n        onHide,\r\n        checkedArray,\r\n        deleteCategories,\r\n        handleClose\r\n    } = props;\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            onHide={onHide}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Confirm Deletion(s)</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n\r\n                {/* <h5>Expanded</h5>\r\n                {\r\n                    expandedArray.map((item, idx) => <p key={idx}>{item.name}</p>)\r\n                } */}\r\n                {/* <h5>Checked</h5> */}\r\n                {\r\n                    checkedArray <= 0 \r\n                    ? <p className='text-center'>Nothing Selected</p>\r\n                    : checkedArray.map((item, idx) => <p key={idx}>{item.name}</p>)\r\n                    \r\n                }\r\n\r\n                <Form.Group className=\"d-flex justify-content-center border-top border-bottom py-2\">\r\n                    <Button variant=\"danger\" onClick={deleteCategories} type=\"submit\">\r\n                        Confirm Deletion\r\n                    </Button>\r\n                    <Button className=\"ml-1\" onClick={handleClose} variant=\"warning\" >\r\n                        Cancel\r\n                    </Button>\r\n                </Form.Group>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default DeleteCategoryModal;","import CheckboxTree from 'react-checkbox-tree';\r\nimport { useState } from 'react';\r\n\r\n// CSS\r\nimport './CategoryScreen.css';\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\n\r\n// Bootstrap Components\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\n\r\n// Redux\r\nimport {\r\n    addCategory,\r\n    updateMultipleCategories,\r\n    deleteCategories as deleteCategoriesAction\r\n} from '../../redux/actions/category.actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// Components\r\nimport Layout from '../../components/Layout/Layout';\r\nimport EditCategoryModal from '../../components/CategoryComponents/EditCategoryModal/EditCategoryModal';\r\nimport AddCategoryModal from '../../components/CategoryComponents/AddCategoryModal/AddCategoryModal';\r\nimport DeleteCategoryModal from '../../components/CategoryComponents/DeleteCategoryModal/DeleteCategoryModal';\r\n// import InputDefault from '../../components/UI/Inputs/InputDefault';\r\n// import CategoryForm from '../../components/CategoryForm/CategoryForm';\r\n\r\nconst CategoryScreen = () => {\r\n\r\n    const categoryState = useSelector(state => state.categoryState);\r\n    const dispatch = useDispatch();\r\n\r\n    const [category, setCategory] = useState({\r\n        _id: '',\r\n        name: '',\r\n        parentId: ''\r\n    })\r\n\r\n    const [checked, setChecked] = useState([]);\r\n    const [expanded, setExpanded] = useState([]);\r\n    const [checkedArray, setCheckedArray] = useState([]);\r\n    const [expandedArray, setExpandedArray] = useState([]);\r\n\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Modals ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Modal States ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n    // Create Category Modal \r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    // Edit Category Modal\r\n    const [showUpdateModal, setUpdateUpdateModal] = useState(false);\r\n    const handleShowUpdateModal = () => {\r\n        updateCheckedAndExpandedArray();\r\n        setUpdateUpdateModal(true);\r\n    }\r\n    const handleCloseUpdateModal = () => setUpdateUpdateModal(false);\r\n\r\n    // Delete Category Warning Modal\r\n    const [deleteWarningModal, setDeleteWarningModal] = useState(false);\r\n    const handleShowDeleteWarning = () => {\r\n        updateCheckedAndExpandedArray();\r\n        setDeleteWarningModal(true);\r\n    }\r\n    const handleCloseDeleteWarning = () => setDeleteWarningModal(false);\r\n\r\n    // Checked & Expanded Arrays used for edit and delete\r\n    const updateCheckedAndExpandedArray = () => {\r\n        const categories = generateCategoryList(categoryState.categoryList);\r\n        const checkedArr = [];\r\n        const expandedArr = [];\r\n\r\n        checked.length > 0 && checked.forEach((categoryId, idx) => {\r\n            const category = categories.find((category, _idx) => categoryId === category.value);\r\n            category && checkedArr.push(category);\r\n        });\r\n        expanded.length > 0 && expanded.forEach((categoryId, idx) => {\r\n            const category = categories.find((category, _idx) => categoryId === category.value);\r\n            category && expandedArr.push(category);\r\n        });\r\n\r\n        setCheckedArray(checkedArr);\r\n        setExpandedArray(expandedArr);\r\n    }\r\n\r\n    // Generate the list for the select input options \r\n    const createCategorySelectOptions = (categories, options = []) => {\r\n        for (let category of categories) {\r\n            options.push({ value: category._id, name: category.name })\r\n            if (category.children.length > 0) {\r\n                createCategorySelectOptions(category.children, options);\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n\r\n    // Handle category creation and reset category state back to initial state\r\n    const handleCreate = (e) => {\r\n        e.preventDefault();\r\n        const cate = {\r\n            name: category.name,\r\n            parentId: category.parentId\r\n        }\r\n\r\n        if (cate.name === null || cate.name === '') {\r\n            alert('Category Name is required.')\r\n        } else {\r\n            dispatch(addCategory(cate));\r\n            setCategory({\r\n                _id: '',\r\n                name: '',\r\n                parentId: ''\r\n            })\r\n            setShow(false);\r\n        }\r\n    }\r\n\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Edit Category Modal ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n    // Generate an inline list of all categories\r\n    const generateCategoryList = (categories, options = []) => {\r\n        for (let category of categories) {\r\n            options.push({ value: category._id, name: category.name, parentId: category.parentId })\r\n            if (category.children.length > 0) {\r\n                generateCategoryList(category.children, options);\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n\r\n    // Handle Inputs\r\n\r\n    const handleCategoryInputs = (e) => {\r\n        e.preventDefault();\r\n        setCategory({\r\n            ...category,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const handleEditCategoryInputs = (key, value, index, type) => {\r\n        if (type === 'checked') {\r\n            const updatedCheckedArray = checkedArray.map((item, idx) => index === idx ? { ...item, [key]: value } : item);\r\n            setCheckedArray(updatedCheckedArray);\r\n        } else if (type === 'expanded') {\r\n            const updatedExpandedArray = expandedArray.map((item, idx) => index === idx ? { ...item, [key]: value } : item);\r\n            setExpandedArray(updatedExpandedArray);\r\n        }\r\n    }\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        const cate = {\r\n            _id: [],\r\n            name: [],\r\n            parentId: []\r\n        }\r\n        expandedArray.forEach((item, index) => {\r\n            cate._id.push(item.value);\r\n            cate.name.push(item.name);\r\n            cate.parentId.push(item.parentId ? item.parentId : \"\");\r\n        });\r\n        checkedArray.forEach((item, index) => {\r\n            cate._id.push(item.value);\r\n            cate.name.push(item.name);\r\n            cate.parentId.push(item.parentId ? item.parentId : \"\");\r\n        });\r\n        dispatch(updateMultipleCategories(cate));\r\n        handleCloseUpdateModal();\r\n    }\r\n\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Delete Categories ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n    const deleteCategories = () => {\r\n        const checkedIdArray = checkedArray.map((item, idx) => ({ _id: item.value }));\r\n        // const expandedIdArray = expandedArray.map((item, idx) => ({ _id: item.value }));\r\n        // const idArray = expandedIdArray.concat(checkedIdArray);\r\n\r\n        if (checkedIdArray.length > 0) {\r\n            dispatch(deleteCategoriesAction(checkedIdArray))\r\n                // .then(res => {\r\n                //     if (res) {\r\n                //         dispatch(getAllCategories());\r\n                //     }\r\n                // })\r\n        }\r\n\r\n        setDeleteWarningModal(false);\r\n    }\r\n\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Render On Screen ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n    // Generate a list of the categories and their children to display on page\r\n    const renderCategories = (categories) => {\r\n        let myCategories = [];\r\n        for (let category of categories) {\r\n            myCategories.push(\r\n                {\r\n                    label: category.name,\r\n                    value: category._id,\r\n                    children: category.children.length > 0 && renderCategories(category.children)\r\n                }\r\n            );\r\n        }\r\n        return myCategories;\r\n    }\r\n\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Component Return ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n    return (\r\n        <Layout sidebar>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                            <h3>Categories</h3>\r\n                            <div className='actionBtnContainer'>\r\n                                <button className='btn btn-dark' onClick={handleShow}>\r\n                                    <span className='fas fa-plus'></span>\r\n                                    <span>Add New Category</span>\r\n                                </button>\r\n                                <button className='btn btn-dark' onClick={handleShowUpdateModal}>\r\n                                    <i className=\"fas fa-edit\" />\r\n                                    <span>Edit</span>\r\n                                </button>\r\n                                <button className='btn btn-danger' onClick={handleShowDeleteWarning}>\r\n                                    <i className=\"fas fa-trash-alt\" />\r\n                                    <span>Delete</span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <CheckboxTree\r\n                            nodes={renderCategories(categoryState.categoryList)}\r\n                            checked={checked}\r\n                            expanded={expanded}\r\n                            onCheck={checked => setChecked(checked)}\r\n                            onExpand={expanded => setExpanded(expanded)}\r\n                            icons={{\r\n                                check: <span className='fas fa-check-square' />,\r\n                                uncheck: <span className='far fa-square' />,\r\n                                halfCheck: <span className='far fa-check-square' />,\r\n                                expandClose: <span className='fas fa-angle-double-right' />,\r\n                                expandOpen: <span className='fas fa-chevron-down' />,\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {/* <Col>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <Button variant=\"primary\" className=\"m-2\" onClick={handleShowUpdateModal}>\r\n                                Edit\r\n                            </Button>\r\n                            <Button className=\"m-2\" variant=\"danger\" onClick={handleShowDeleteWarning}>\r\n                                Delete\r\n                            </Button>\r\n                        </div>\r\n                    </Col> */}\r\n                </Row>\r\n            </Container>\r\n\r\n            {/* Render Modals */}\r\n\r\n            <AddCategoryModal\r\n                show={show}\r\n                size={'lg'}\r\n                onHide={handleClose}\r\n                handleInputs={handleCategoryInputs}\r\n                category={category}\r\n                categorySelectOptions={createCategorySelectOptions(categoryState.categoryList)}\r\n                handleClose={handleClose}\r\n                handleCreate={handleCreate}\r\n            />\r\n\r\n            <EditCategoryModal\r\n                show={showUpdateModal}\r\n                size={'lg'}\r\n                onHide={handleCloseUpdateModal}\r\n                expandedArray={expandedArray}\r\n                checkedArray={checkedArray}\r\n                categorySelectOptions={createCategorySelectOptions(categoryState.categoryList)}\r\n                handleEditCategoryInputs={handleEditCategoryInputs}\r\n                handleClose={handleCloseUpdateModal}\r\n                handleUpdate={handleUpdate}\r\n            />\r\n\r\n            <DeleteCategoryModal\r\n                show={deleteWarningModal}\r\n                onHide={handleCloseDeleteWarning}\r\n                expandedArray={expandedArray}\r\n                checkedArray={checkedArray}\r\n                deleteCategories={deleteCategories}\r\n                handleClose={handleCloseDeleteWarning}\r\n            />\r\n\r\n            {/* End Render Modals */}\r\n\r\n        </Layout >\r\n    );\r\n};\r\n\r\nexport default CategoryScreen;\r\n","import * as actionTypes from '../constants/adminConstants'\r\nimport axiosInstance from '../../helpers/axios';\r\n// import axios from \"axios\"\r\n\r\n\r\nexport const getInitialData = () => {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: actionTypes.GET_INITIAL_DATA_REQUEST\r\n        });\r\n\r\n        const res = await axiosInstance.get(`/initial-data`);\r\n        if (res.status === 200) {\r\n            const { categories: categoryList, products, orders } = res.data;\r\n\r\n            // console.log('data', res.data);\r\n            // console.log('categories', categoryList);\r\n            // console.log('products', products);\r\n            // console.log('orders', orders);\r\n            dispatch({\r\n                type: actionTypes.GET_ALL_CATEGORIES_SUCCESS,\r\n                payload: { categoryList: categoryList }\r\n            });\r\n            dispatch({\r\n                type: actionTypes.GET_ALL_PRODUCTS_SUCCESS,\r\n                payload: { products: products }\r\n            });\r\n            dispatch({\r\n                type: actionTypes.GET_CUSTOMER_ORDERS_SUCCESS,\r\n                payload: { orders }\r\n            })\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nimport { useEffect, useState } from 'react';\r\n// import './ProductScreen.css';\r\n\r\n// Bootstrap Components\r\nimport { Container, Col, Row, Table } from 'react-bootstrap';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addProduct } from '../../redux/actions/product.actions';\r\n// import { getAllCategories } from '../../redux/actions/category.actions';\r\n\r\n// Components\r\nimport InputDefault from '../UI/Inputs/InputDefault';\r\n\r\n\r\n\r\n\r\nconst AddProductModal = (props) => {\r\n    const { product, show, handleClose, handleSave, handleProductInputs, createCategorySelectOptions } = props\r\n\r\n    const categoryState = useSelector(state => state.categoryState);\r\n    const productState = useSelector(state => state.productState);\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            onHide={handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Add New Product</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSave}>\r\n                    <Form.Group controlId=\"formProductName\">\r\n                        <InputDefault\r\n                            name=\"name\"\r\n                            label=\"Product Name\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Product Name\"\r\n                            value={product.name}\r\n                            onChange={handleProductInputs}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formParentSelect\">\r\n                        <Form.Label>Select Category</Form.Label>\r\n                        <Form.Row>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"category\"\r\n                                value={product.category}\r\n                                onChange={handleProductInputs}\r\n                            >\r\n                                <option> </option>\r\n                                {\r\n                                    createCategorySelectOptions(categoryState.categoryList).map(option =>\r\n                                        <option key={option.value} value={option.value}>{option.name}</option>\r\n                                    )\r\n                                }\r\n                            </select>\r\n                        </Form.Row>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formProductDesc\">\r\n                        <InputDefault\r\n                            name=\"description\"\r\n                            label=\"Product Description\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Product Description\"\r\n                            value={product.description}\r\n                            onChange={handleProductInputs}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formProductPrice\">\r\n                        <InputDefault\r\n                            name=\"price\"\r\n                            label=\"Product Price\"\r\n                            type=\"number\"\r\n                            placeholder=\"$\"\r\n                            value={product.price}\r\n                            onChange={handleProductInputs}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formProductMeasurement\">\r\n                        <InputDefault\r\n                            name=\"measurement\"\r\n                            label=\"Product Measurement\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Product Measurement\"\r\n                            value={product.measurement}\r\n                            onChange={handleProductInputs}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formProductImage\">\r\n                        <Form.Label>Product Image</Form.Label>\r\n                        <Form.Control\r\n                            type=\"file\"\r\n                            name=\"productImage\"\r\n                            onChange={handleProductInputs}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formProductInStock\">\r\n                        <Form.Check\r\n                            name=\"inStock\"\r\n                            label=\"Product In Stock\"\r\n                            type=\"checkbox\"\r\n                            value={product.inStock}\r\n                            onChange={handleProductInputs}\r\n                            readOnly\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"d-flex justify-content-center border-top border-bottom py-2\">\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button className=\"ml-1\" variant=\"primary\" type=\"submit\">\r\n                            Save\r\n                        </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddProductModal;","import React from 'react';\r\n\r\n\r\nimport { useEffect, useState } from 'react';\r\n// import './ProductScreen.css';\r\n\r\n// Bootstrap Components\r\nimport { Container, Col, Row, Table } from 'react-bootstrap';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addProduct } from '../../redux/actions/product.actions';\r\nimport { generatePublicUrl } from '../../urlConfig';\r\n// import { getAllCategories } from '../../redux/actions/category.actions';\r\n\r\n// Components\r\nimport InputDefault from '../UI/Inputs/InputDefault';\r\n\r\n\r\n\r\n\r\nconst EditProductModal = (props) => {\r\n    const { product, show, handleClose, handleSave, handleProductInputs, createCategorySelectOptions } = props\r\n\r\n    const categoryState = useSelector(state => state.categoryState);\r\n    const productState = useSelector(state => state.productState);\r\n\r\n    const [imgPreview, setImgPreview] = useState({\r\n        file: null\r\n    });\r\n\r\n    const handlePreview = (e) => {\r\n        setImgPreview({\r\n            file: URL.createObjectURL(e.target.files[0])\r\n        })\r\n    }\r\n\r\n    console.log(product)\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            onHide={handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Edit Product</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSave} encType=\"multipart/form-data\">\r\n                    <Form.Group controlId=\"formProductName\">\r\n                        <InputDefault\r\n                            name=\"name\"\r\n                            label=\"Product Name\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Product Name\"\r\n                            value={product.name}\r\n                            onChange={handleProductInputs}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formParentSelect\">\r\n                        <Form.Label>Select Category</Form.Label>\r\n                        <Form.Row>\r\n                        <select\r\n                                className=\"form-control\"\r\n                                name=\"category\"\r\n                                value={product.category}\r\n                                onChange={handleProductInputs}\r\n                            >\r\n                                <option>{product.category.name} </option>\r\n                                {\r\n                                    createCategorySelectOptions(categoryState.categoryList).map(option =>\r\n                                        <option key={option.value} value={option.value}>{option.name}</option>\r\n                                    )\r\n                                }\r\n                            </select>\r\n                            {/* <select\r\n                                className=\"form-control\"\r\n                                name=\"category\"\r\n                                value={product.category}\r\n                                onChange={handleProductInputs}\r\n                            >\r\n                                <option value={product.category}>{product.category.name} </option>\r\n                                {\r\n                                    createCategorySelectOptions(categoryState.categoryList).map(option =>\r\n                                        <option key={option.value} value={option.value}>{option.name}</option>\r\n                                    )\r\n                                }\r\n                            </select> */}\r\n                        </Form.Row>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formProductDesc\">\r\n                        <InputDefault\r\n                            name=\"description\"\r\n                            label=\"Product Description\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Product Description\"\r\n                            value={product.description}\r\n                            onChange={handleProductInputs}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formProductPrice\">\r\n                        <InputDefault\r\n                            name=\"price\"\r\n                            label=\"Product Price\"\r\n                            type=\"number\"\r\n                            placeholder=\"$\"\r\n                            value={product.price}\r\n                            onChange={handleProductInputs}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formProductMeasurement\">\r\n                        <InputDefault\r\n                            name=\"measurement\"\r\n                            label=\"Product Measurement\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Product Measurement\"\r\n                            value={product.measurement}\r\n                            onChange={handleProductInputs}\r\n                        />\r\n                    </Form.Group>\r\n                    {/* <Form.Group style={{display: 'flex', justifyContent:'space-between'}} controlId=\"formProductImage\">\r\n                        <Form.Label style={{width: '25%'}}>Product Image</Form.Label>\r\n                        <Form.Control\r\n                            type=\"file\"\r\n                            name=\"productImage\"\r\n                            onChange={handlePreview}\r\n                            style={{width: '50%'}}\r\n                            // filename={product.productImage}\r\n                        />\r\n                        <img\r\n                            // src={imgPreview.file}\r\n\r\n                            src={imgPreview.file !== null ? imgPreview.file : generatePublicUrl(product.productImage)}\r\n                            alt={product.name}\r\n                            style={{width: '25%'}}\r\n                        />\r\n                    </Form.Group> */}\r\n                    <Form.Group controlId=\"formProductInStock\">\r\n                        <Form.Check\r\n                            name=\"inStock\"\r\n                            label=\"Product In Stock\"\r\n                            type=\"checkbox\"\r\n                            checked={product.inStock == true ? true : false}\r\n                            value={product.inStock}\r\n                            onChange={handleProductInputs}\r\n                            readOnly\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"d-flex justify-content-center border-top border-bottom py-2\">\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button className=\"ml-1\" variant=\"primary\" type=\"submit\">\r\n                            Save\r\n                        </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditProductModal;","import { useEffect, useState } from 'react';\r\nimport './ProductScreen.css';\r\n\r\n// Bootstrap Components\r\nimport { Container, Col, Row, Table } from 'react-bootstrap';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addProduct, deleteProductById, updateProductInfo } from '../../redux/actions/product.actions';\r\n// import { getAllCategories } from '../../redux/actions/category.actions';\r\nimport { getInitialData } from '../../redux/actions/initialData.actions';\r\n\r\n// Components\r\nimport InputDefault from '../../components/UI/Inputs/InputDefault';\r\nimport Layout from '../../components/Layout/Layout';\r\nimport { generatePublicUrl } from '../../urlConfig';\r\nimport AddProductModal from '../../components/ProductModals/AddProductModal';\r\nimport EditProductModal from '../../components/ProductModals/EditProductModal';\r\n// import ProductModal from '../../components/ProductModal/ProductModal';\r\n\r\n\r\nconst ProductScreen = (props) => {\r\n\r\n    const categoryState = useSelector(state => state.categoryState);\r\n    const productState = useSelector(state => state.productState);\r\n    const dispatch = useDispatch();\r\n\r\n    const [product, setProduct] = useState({\r\n        _id: '',\r\n        category: '',\r\n        name: '',\r\n        description: '',\r\n        price: '',\r\n        measurement: '',\r\n        productImage: '',\r\n        inStock: false\r\n    })\r\n\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Add Product Modal ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => {\r\n        setProduct({\r\n            _id: '',\r\n            category: '',\r\n            name: '',\r\n            description: '',\r\n            price: '',\r\n            measurement: '',\r\n            productImage: null,\r\n            inStock: false\r\n        })\r\n        setShow(false)\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n    const [editProductModal, setEditProductModal] = useState(false);\r\n\r\n    const handleShowEdit = (product) => {\r\n        setEditProductModal(true);\r\n        setProduct(product);\r\n        setProductDetails(product);\r\n    }\r\n\r\n    const handleCloseEdit = () => {\r\n        setProduct({\r\n            _id: '',\r\n            category: '',\r\n            name: '',\r\n            description: '',\r\n            price: '',\r\n            measurement: '',\r\n            productImage: null,\r\n            inStock: false\r\n        })\r\n        setEditProductModal(false);\r\n    }\r\n\r\n    // const handleShowProductModal = (product) => {\r\n    //     setProductModal(true);\r\n    //     setProductDetails(product);\r\n\r\n    // };\r\n\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Form Stuff ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n    // Check the input type and assign the values as needed\r\n    const handleProductInputs = (e) => {\r\n        // If the type is a checkbox, set it to the opposite of the initial product state (false)\r\n        if (e.target.type === \"checkbox\") {\r\n            setProduct({\r\n                ...product,\r\n                [e.target.name]: !product[e.target.name]\r\n            })\r\n            // If the type is a file set productImage to the file being uploaded\r\n        } else if (e.target.type === \"file\") {\r\n            setProduct({\r\n                ...product,\r\n                productImage: e.target.files[0]\r\n            })\r\n            // Handle all other input fields\r\n        } else {\r\n            setProduct({\r\n                ...product,\r\n                [e.target.name]: e.target.value\r\n            })\r\n        }\r\n    }\r\n\r\n    // Generate the list for the input type select options \r\n    const createCategorySelectOptions = (categories, options = []) => {\r\n        for (let category of categories) {\r\n            options.push({ value: category._id, name: category.name })\r\n            if (category.children.length > 0) {\r\n                createCategorySelectOptions(category.children, options);\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n\r\n    // Handle form submission and reset product state back to initial values\r\n    const handleSave = (e) => {\r\n        e.preventDefault();\r\n        const form = new FormData();\r\n        form.append(\"category\", product.category);\r\n        form.append(\"name\", product.name);\r\n        form.append(\"description\", product.description);\r\n        form.append(\"price\", product.price);\r\n        form.append(\"measurement\", product.measurement);\r\n        form.append(\"productImage\", product.productImage);\r\n        form.append(\"inStock\", product.inStock);\r\n        // console.log(form);\r\n        dispatch(addProduct(form));\r\n        setShow(false);\r\n        setProduct({\r\n            _id: '',\r\n            category: '',\r\n            name: '',\r\n            description: '',\r\n            price: '',\r\n            measurement: '',\r\n            productImage: '',\r\n            inStock: false\r\n        })\r\n        dispatch(getInitialData())\r\n    }\r\n\r\n    const handleSaveEdit  = (e) => {\r\n        e.preventDefault();\r\n        // const form = new FormData();\r\n        // form.append(\"_id\", product._id);\r\n        // form.append(\"category\", product.category);\r\n        // form.append(\"name\", product.name);\r\n        // form.append(\"description\", product.description);\r\n        // form.append(\"price\", product.price);\r\n        // form.append(\"measurement\", product.measurement);\r\n        // form.append(\"productImage\", product.productImage);\r\n        // form.append(\"inStock\", product.inStock);\r\n        \r\n\r\n        // for (var [key, value] of form.entries()) {\r\n        //     console.log(key, value);\r\n        // }\r\n\r\n\r\n        // dispatch(updateProductInfo(form));\r\n        \r\n        const updateInfo = {\r\n            ...product\r\n        }\r\n        \r\n        console.log(updateInfo);\r\n        \r\n        dispatch(updateProductInfo(updateInfo));\r\n\r\n        setEditProductModal(false);\r\n        setProduct({\r\n            _id: '',\r\n            category: '',\r\n            name: '',\r\n            description: '',\r\n            price: '',\r\n            measurement: '',\r\n            productImage: '',\r\n            inStock: false\r\n        })\r\n        dispatch(getInitialData())\r\n    }\r\n\r\n    const handleRemoveProduct = (id) => {\r\n        const payload = {\r\n            productId: id\r\n        }\r\n        dispatch(deleteProductById(payload))\r\n\r\n    }\r\n\r\n    const renderEditProductModal = () => {\r\n\r\n        // console.log('productDetails', productDetails);\r\n\r\n        if (!productDetails) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <EditProductModal\r\n                product={product}\r\n                show={editProductModal}\r\n                handleClose={handleCloseEdit}\r\n                handleSave={handleSaveEdit}\r\n                handleProductInputs={handleProductInputs}\r\n                createCategorySelectOptions={createCategorySelectOptions}\r\n            />\r\n        )\r\n    }\r\n\r\n    const renderAddProductModal = () => {\r\n        return (\r\n\r\n            <AddProductModal\r\n                product={product}\r\n                show={show}\r\n                handleClose={handleClose}\r\n                handleSave={handleSave}\r\n                handleProductInputs={handleProductInputs}\r\n                createCategorySelectOptions={createCategorySelectOptions}\r\n            />\r\n\r\n            // <Modal\r\n            //     show={show}\r\n            //     size=\"lg\"\r\n            //     aria-labelledby=\"contained-modal-title-vcenter\"\r\n            //     centered\r\n            //     onHide={handleClose}\r\n            //     backdrop=\"static\"\r\n            //     keyboard={false}\r\n            // >\r\n            //     <Modal.Header closeButton>\r\n            //         <Modal.Title>Add New Product</Modal.Title>\r\n            //     </Modal.Header>\r\n            //     <Modal.Body>\r\n            //         <Form onSubmit={handleSave}>\r\n            //             <Form.Group controlId=\"formProductName\">\r\n            //                 <InputDefault\r\n            //                     name=\"name\"\r\n            //                     label=\"Product Name\"\r\n            //                     type=\"text\"\r\n            //                     placeholder=\"Enter Product Name\"\r\n            //                     value={product.name}\r\n            //                     onChange={handleProductInputs}\r\n            //                 />\r\n            //             </Form.Group>\r\n            //             <Form.Group controlId=\"formParentSelect\">\r\n            //                 <Form.Label>Select Category</Form.Label>\r\n            //                 <Form.Row>\r\n            //                     <select\r\n            //                         className=\"form-control\"\r\n            //                         name=\"category\"\r\n            //                         value={product.category}\r\n            //                         onChange={handleProductInputs}\r\n            //                     >\r\n            //                         <option> </option>\r\n            //                         {\r\n            //                             createCategorySelectOptions(categoryState.categoryList).map(option =>\r\n            //                                 <option key={option.value} value={option.value}>{option.name}</option>\r\n            //                             )\r\n            //                         }\r\n            //                     </select>\r\n            //                 </Form.Row>\r\n            //             </Form.Group>\r\n            //             <Form.Group controlId=\"formProductDesc\">\r\n            //                 <InputDefault\r\n            //                     name=\"description\"\r\n            //                     label=\"Product Description\"\r\n            //                     type=\"text\"\r\n            //                     placeholder=\"Enter Product Description\"\r\n            //                     value={product.description}\r\n            //                     onChange={handleProductInputs}\r\n            //                 />\r\n            //             </Form.Group>\r\n            //             <Form.Group controlId=\"formProductPrice\">\r\n            //                 <InputDefault\r\n            //                     name=\"price\"\r\n            //                     label=\"Product Price\"\r\n            //                     type=\"number\"\r\n            //                     placeholder=\"$\"\r\n            //                     value={product.price}\r\n            //                     onChange={handleProductInputs}\r\n            //                 />\r\n            //             </Form.Group>\r\n            //             <Form.Group controlId=\"formProductMeasurement\">\r\n            //                 <InputDefault\r\n            //                     name=\"measurement\"\r\n            //                     label=\"Product Measurement\"\r\n            //                     type=\"text\"\r\n            //                     placeholder=\"Enter Product Measurement\"\r\n            //                     value={product.measurement}\r\n            //                     onChange={handleProductInputs}\r\n            //                 />\r\n            //             </Form.Group>\r\n            //             <Form.Group controlId=\"formProductImage\">\r\n            //                 <Form.Label>Product Image</Form.Label>\r\n            //                 <Form.Control\r\n            //                     type=\"file\"\r\n            //                     name=\"productImage\"\r\n            //                     onChange={handleProductInputs}\r\n            //                 />\r\n            //             </Form.Group>\r\n            //             <Form.Group controlId=\"formProductInStock\">\r\n            //                 <Form.Check\r\n            //                     name=\"inStock\"\r\n            //                     label=\"Product In Stock\"\r\n            //                     type=\"checkbox\"\r\n            //                     value={product.inStock}\r\n            //                     onChange={handleProductInputs}\r\n            //                     readOnly\r\n            //                 />\r\n            //             </Form.Group>\r\n            //             <Form.Group className=\"d-flex justify-content-center border-top border-bottom py-2\">\r\n            //                 <Button variant=\"secondary\" onClick={handleClose}>\r\n            //                     Close\r\n            //                 </Button>\r\n            //                 <Button className=\"ml-1\" variant=\"primary\" type=\"submit\">\r\n            //                     Save\r\n            //                 </Button>\r\n            //             </Form.Group>\r\n            //         </Form>\r\n            //     </Modal.Body>\r\n            // </Modal>\r\n        )\r\n    }\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ End Add Product Modal ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Show on page ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n    // Display product list\r\n    const renderProducts = () => {\r\n        return <Table striped responsive=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Category</th>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                    <th>In Stock</th>\r\n                    <th style={{ display: 'flex', justifyContent: 'center' }}>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody style={{ fontSize: \"12px\" }}>\r\n                {\r\n                    productState.products.length > 0\r\n                        ? productState.products.map((p, idx) => {\r\n                            return (\r\n                                <tr style={{ verticalAlign: 'middle' }} key={idx}>\r\n                                    <td style={{ verticalAlign: 'middle' }}>{idx + 1}</td>\r\n                                    <td onClick={() => handleShowProductModal(p)} style={{ verticalAlign: 'middle' }}>{p.category.name}</td>\r\n                                    <td onClick={() => handleShowProductModal(p)} style={{ verticalAlign: 'middle' }}>{p.name}</td>\r\n                                    <td style={{ verticalAlign: 'middle' }}>${p.price.toFixed(2)} / {p.measurement}</td>\r\n                                    <td style={{ verticalAlign: 'middle' }}>{p.inStock ? \"In Stock\" : \"Out of Stock\"}</td>\r\n                                    <td style={{ verticalAlign: 'middle', display: 'flex', justifyContent: 'center' }}>\r\n                                        <button\r\n                                            className='btn'\r\n                                            style={{\r\n                                                display: 'flex'\r\n                                            }}\r\n                                            onClick={() => handleShowEdit(p)}\r\n                                        >\r\n                                            <i className='far fa-edit'></i>\r\n                                        </button>\r\n                                        <button\r\n                                            className='btn'\r\n                                            style={{\r\n                                                display: 'flex'\r\n                                            }}\r\n                                            variant='danger'\r\n                                            size='sm'\r\n                                            onClick={() => {\r\n                                                handleRemoveProduct(p._id)\r\n                                            }}\r\n                                        >\r\n                                            <i className='fas fa-trash-alt'></i>\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>)\r\n                        })\r\n                        : null\r\n                }\r\n            </tbody>\r\n        </Table>\r\n    }\r\n    useEffect(() => {\r\n        // dispatch(getAllProducts())\r\n        dispatch(getInitialData())\r\n    }, [show])\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ End Show on page ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Product Details Modal ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    const [productModal, setProductModal] = useState(false);\r\n    const [productDetails, setProductDetails] = useState({});\r\n\r\n    const handleShowProductModal = (product) => {\r\n        setProductModal(true);\r\n        setProductDetails(product);\r\n\r\n    };\r\n\r\n    const handleCloseShowProductModal = () => {\r\n        setProductModal(false);\r\n    }\r\n\r\n    const renderProductDetailsModal = () => {\r\n\r\n        if (!productDetails) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                show={productModal}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                onHide={handleCloseShowProductModal}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{productDetails.name}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Row className=\"border-bottom\">\r\n                        <Col>\r\n                            <label className=\"key\">Category</label>\r\n                            <p className=\"value\">{productDetails.category ? productDetails.category.name : null}</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"border-bottom pt-3\">\r\n                        <Col>\r\n                            <label className=\"key\">Price</label>\r\n                            <p className=\"value\">${productDetails.price ? productDetails.price.toFixed(2) : productDetails.price} / {productDetails.measurement}</p>\r\n                        </Col>\r\n                        <Col>\r\n                            <label className=\"key\">Availability</label>\r\n                            <p className=\"value\">{productDetails.inStock ? \"In Stock\" : \"Out of Stock\"}</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"border-bottom pt-3\">\r\n                        <Col>\r\n                            <label className=\"key\">Description</label>\r\n                            <p className=\"value\">{productDetails.description}</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"border-bottom pt-3\">\r\n                        <Col>\r\n                            <label className=\"key\">Product Image</label>\r\n                            <div className=\"productImageContainer\">\r\n                                <img src={generatePublicUrl(productDetails.productImage)} alt={productDetails.name} />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    {/* <Row>\r\n                        <Button\r\n                            variant='warning'\r\n                            size='sm'\r\n                            style={{ marginRight: '10px' }}\r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                    </Row> */}\r\n                </Modal.Body>\r\n            </Modal>\r\n        )\r\n    }\r\n    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ End Product Details Modal ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n\r\n    return (\r\n        <Layout sidebar>\r\n            <Container fluid>\r\n                <Row sticky=\"top\" className=\"my-2\">\r\n                    <Col md={12}>\r\n                        <div style={{ display: 'flex', justifyContent: 'space-between', }}>\r\n                            <h3>Products</h3>\r\n                            <Button variant=\"primary\" onClick={handleShow}>\r\n                                Add\r\n                            </Button>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        {renderProducts()}\r\n                        <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '20px' }}>\r\n                            <Button style={{}} variant=\"primary\" onClick={handleShow}>\r\n                                Add\r\n                            </Button>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n            {/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Add Product Modal ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  */}\r\n            {renderAddProductModal()}\r\n            {renderProductDetailsModal()}\r\n            {renderEditProductModal()}\r\n\r\n        </Layout >\r\n    );\r\n};\r\n\r\nexport default ProductScreen;","import * as actionTypes from '../constants/adminConstants'\r\nimport axiosInstance from '../../helpers/axios';\r\n// import axios from \"axios\"\r\n\r\nexport const addProduct = (form) => {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: actionTypes.ADD_NEW_PRODUCT_REQUEST\r\n        });\r\n\r\n        await axiosInstance.post(`/products`, form, { withCredentials: true })\r\n            .then(res => {\r\n                dispatch({\r\n                    type: actionTypes.ADD_NEW_PRODUCT_SUCCESS,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: actionTypes.ADD_NEW_PRODUCT_FAIL,\r\n                    payload: err.response.data\r\n                })\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const getAllProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: actionTypes.GET_ALL_PRODUCTS_REQUEST });\r\n\r\n        const res = await axiosInstance.get(`/categories/products`);\r\n\r\n        if (res.status === 200) {\r\n            dispatch({\r\n                type: actionTypes.GET_ALL_PRODUCTS_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_ALL_PRODUCTS_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n        });\r\n    };\r\n};\r\n\r\nexport const updateProductInfo = (payload) => {\r\n    return async (dispatch) => {\r\n        try {\r\n\r\n            console.log(payload);\r\n\r\n            // for (var [key, value] of form.entries()) {\r\n            //     console.log(key, value);\r\n            // }\r\n\r\n            // console.log('form in actions', form);\r\n            await axiosInstance.put(`products/${payload._id}`, payload, { withCredentials: true })\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n};\r\n\r\nexport const deleteProductById = (payload) => {\r\n    return async (dispatch) => {\r\n        try {\r\n\r\n            // console.log('payload in actions', payload);\r\n\r\n            const res = await axiosInstance.delete(`product/deleteProductById`, {\r\n                data: { payload }, withCredentials: true,\r\n            });\r\n\r\n            dispatch({ type: actionTypes.DELETE_PRODUCT_BY_ID_REQUEST });\r\n\r\n            if (res.status === 202) {\r\n                dispatch({ type: actionTypes.DELETE_PRODUCT_BY_ID_SUCCESS });\r\n                dispatch(getAllProducts());\r\n            } else {\r\n                const { error } = res.data;\r\n                dispatch({\r\n                    type: actionTypes.DELETE_PRODUCT_BY_ID_FAILURE,\r\n                    payload: {\r\n                        error,\r\n                    },\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n// Bootstrap Components\r\nimport { Container, Row, Form, Col, Button } from 'react-bootstrap';\r\n\r\n// Components\r\n// import InputBasic from '../../components/UI/Inputs/InputBasic';\r\nimport InputDefault from '../../components/UI/Inputs/InputDefault';\r\nimport Layout from '../../components/Layout/Layout';\r\n\r\n// Redux\r\nimport { login } from '../../redux/actions/adminAuth.actions'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst LoginScreen = () => {\r\n\r\n    const auth = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    // const [email, setEmail] = useState('');\r\n    // const [password, setPassword] = useState('');\r\n\r\n    const initialLog = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n    const [log, setLog] = useState(initialLog);\r\n    const [logError, setLogError] = useState('');\r\n\r\n    const handleLogInputs = (e) => {\r\n        setLog({\r\n            ...log,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    const userLogin = (e) => {\r\n        e.preventDefault();\r\n        const user = {\r\n            email: log.email,\r\n            password: log.password\r\n        }\r\n        dispatch(login(user));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (auth.error) {\r\n            if (auth.error.message) {\r\n                // console.log(\"auth.error.message\");\r\n                // console.log(auth.error);\r\n                // console.log(auth.error.message);\r\n                setLogError({\r\n                    message: auth.error.message\r\n                })\r\n            } else {\r\n                // console.log(\"auth.error.error\");\r\n                // console.log(auth.error);\r\n                // console.log(auth.error.error);\r\n                setLogError({\r\n                    error: auth.error.error\r\n                })\r\n            }\r\n        }\r\n    }, [auth])\r\n\r\n    if (auth.authenticate) {\r\n        return <Redirect to={`/`} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Layout>\r\n                <Container>\r\n                    <Row style={{ marginTop: '50px' }}>\r\n                        <Col md={{ span: 8, offset: 2 }}>\r\n                            <Form onSubmit={userLogin}>\r\n\r\n                                <Form.Group style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                    <Form.Text className=\"text-danger font-weight-bold\">\r\n                                        {\r\n                                            logError\r\n                                                ? logError.error\r\n                                                    ? logError.error\r\n                                                    : logError.message\r\n                                                : \"\"\r\n                                        }\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Col} controlId=\"formBasicEmail\">\r\n                                    <InputDefault\r\n                                        name=\"email\"\r\n                                        label=\"Email Address\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Email Address\"\r\n                                        value={log.email}\r\n                                        onChange={handleLogInputs}\r\n                                    />\r\n                                    {/* <Form.Text className=\"text-muted\">\r\n                                        {error.email ? error.email.message : \"\"}\r\n                                    </Form.Text> */}\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Col} controlId=\"formGridPass\">\r\n                                    <InputDefault\r\n                                        name=\"password\"\r\n                                        label=\"Password\"\r\n                                        type=\"password\"\r\n                                        placeholder=\"Password\"\r\n                                        value={log.password}\r\n                                        onChange={handleLogInputs}\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                                    <Button variant=\"primary\" type=\"submit\">\r\n                                        Submit\r\n                                    </Button>\r\n                                </Form.Group>\r\n\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </Layout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginScreen;","import React from 'react';\r\n\r\n// CSS\r\nimport './HomeScreen.css';\r\n\r\n// Components\r\nimport Layout from '../../components/Layout/Layout';\r\n\r\nconst HomeScreen = () => {\r\n    return (\r\n        <div>\r\n            <Layout sidebar>\r\n                Home\r\n            </Layout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;","import React, { useEffect } from 'react';\nimport './App.css';\n\n// Routing\nimport { Switch, Route } from 'react-router-dom';\nimport PrivateRoute from './HOC/PrivateRoute';\n\n// Components\nimport CurrentOrdersScreen from './views/CurrentOrdersScreen/CurrentOrdersScreen';\nimport CompleteOrdersScreen from './views/CompleteOrders/CompleteOrders';\nimport RegisterScreen from './views/RegisterScreen/RegisterScreen';\nimport CategoryScreen from './views/CategoryScreen/CategoryScreen';\nimport ProductScreen from './views/ProductsScreen/ProductScreen';\nimport LoginScreen from './views/LoginScreen/LoginScreen';\nimport HomeScreen from './views/HomeScreen/HomeScreen';\n\n\n// Redux\nimport { isUserLoggedIn } from './redux/actions/adminAuth.actions'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getInitialData } from './redux/actions/initialData.actions';\n\nfunction App() {\n\n  const auth = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!auth.authenticate) {\n      dispatch(isUserLoggedIn());\n    }\n    dispatch(getInitialData());\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <PrivateRoute exact path=\"/\" component={HomeScreen} />\n        <PrivateRoute path=\"/products\" component={ProductScreen} />\n        <PrivateRoute path=\"/current-orders\" component={CurrentOrdersScreen} />\n        <PrivateRoute path=\"/complete-orders\" component={CompleteOrdersScreen} />\n        <PrivateRoute path=\"/categories\" component={CategoryScreen} />\n        \n        <Route exact path=\"/register\" component={RegisterScreen} />\n        <Route exact path=\"/login\" component={LoginScreen} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import * as actionTypes from '../constants/adminConstants';\r\n\r\n\r\nconst initialState = {\r\n    // token: null,\r\n    user: {\r\n        _id: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        role: ''\r\n    },\r\n    authenticate: false,\r\n    authenticating: false,\r\n    loading: false,\r\n    error: null,\r\n    message: ''\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADMIN_LOGIN_REQUEST:\r\n            state = {\r\n                ...state,\r\n                authenticating: true\r\n            }\r\n            break;\r\n        case actionTypes.ADMIN_LOGIN_SUCCESS:\r\n            state = {\r\n                // ...state,\r\n                // token: action.payload.token,\r\n                user: action.payload.user,\r\n                authenticate: true,\r\n                authenticating: false\r\n            }\r\n            break;\r\n        case actionTypes.ADMIN_LOGIN_FAIL:\r\n            state = {\r\n                authenticate: false,\r\n                authenticating: false,\r\n                error: action.payload,\r\n            }\r\n            break;\r\n        case actionTypes.ADMIN_LOGOUT_REQUEST:\r\n            state = {\r\n                state: {\r\n                    ...initialState,\r\n                    loading: true\r\n                }\r\n            }\r\n            break;\r\n        case actionTypes.ADMIN_LOGOUT_SUCCESS:\r\n            state = {\r\n                ...initialState,\r\n                loading: false,\r\n                authenticate: false,\r\n                authenticating: false\r\n            }\r\n            break;\r\n        case actionTypes.ADMIN_LOGOUT_FAIL:\r\n            state = {\r\n                authenticate: false,\r\n                authenticating: false,\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}\r\n\r\nconst regInitialState = {\r\n    error: null,\r\n    message: '',\r\n    loading: false\r\n}\r\n\r\nexport const registrationReducer = (state = regInitialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADMIN_REGISTRATION_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case actionTypes.ADMIN_REGISTRATION_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                loading: false,\r\n                message: action.payload\r\n            }\r\n            break;\r\n        case actionTypes.ADMIN_REGISTRATION_FAIL:\r\n            // console.log(action.payload);\r\n            state = {\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}","import * as actionTypes from '../constants/adminConstants';\r\n\r\nconst initialState = {\r\n    categoryList: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\nconst buildNewCategoryList = (parentId, categoryList, category) => {\r\n    const newCategoryList = [];\r\n\r\n    if (parentId === undefined) {\r\n        return [\r\n            ...categoryList,\r\n            {\r\n                _id: category._id,\r\n                name: category.name,\r\n                children: []\r\n            }\r\n        ]\r\n    }\r\n\r\n    for (const cat of categoryList) {\r\n\r\n        if (cat._id === parentId) {\r\n            const newCategory = {\r\n                _id: category._id,\r\n                name: category.name,\r\n                parentId: category.parentId,\r\n                children: []\r\n            }\r\n            newCategoryList.push({\r\n                ...cat,\r\n                children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\r\n            })\r\n        } else {\r\n            newCategoryList.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategoryList(parentId, cat.children, category) : []\r\n            })\r\n        }\r\n    }\r\n    // console.log(newCategoryList);\r\n    return newCategoryList;\r\n}\r\n\r\nexport const categoryReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.GET_ALL_CATEGORIES_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case actionTypes.GET_ALL_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categoryList: action.payload.categoryList,\r\n                loading: false\r\n            }\r\n            break;\r\n        case actionTypes.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case actionTypes.ADD_NEW_CATEGORY_SUCCESS:\r\n\r\n            const category = action.payload.category;\r\n            const updatedCats = buildNewCategoryList(category.parentId, state.categoryList, category);\r\n            // console.log(updatedCats);\r\n\r\n            state = {\r\n                ...state,\r\n                categoryList: updatedCats,\r\n                loading: false\r\n            }\r\n            break;\r\n        case actionTypes.ADD_NEW_CATEGORY_FAIL:\r\n            state = {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n            break;\r\n        case actionTypes.UPDATE_CATEGORIES_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case actionTypes.UPDATE_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                loading: false\r\n            }\r\n            break;\r\n        case actionTypes.UPDATE_CATEGORIES_FAIL:\r\n            state = {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error\r\n            }\r\n            break;\r\n        case actionTypes.DELETE_CATEGORIES_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case actionTypes.DELETE_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                loading: false\r\n            }\r\n            break;\r\n        case actionTypes.DELETE_CATEGORIES_FAIL:\r\n            state = {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error\r\n            }\r\n\r\n    }\r\n    return state\r\n}\r\n","import * as actionTypes from '../constants/adminConstants';\r\n\r\nconst initialState = {\r\n    products: [],\r\n    loading: false,\r\n    errors: null\r\n}\r\n\r\nexport const productReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.GET_ALL_PRODUCTS_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case actionTypes.GET_ALL_PRODUCTS_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                products: action.payload.products,\r\n                loading: false\r\n            }\r\n    }\r\n    return state;\r\n}","import * as actionTypes from '../constants/adminConstants';\r\n\r\nconst initState = {\r\n    orders: [],\r\n};\r\n\r\nexport const orderReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.GET_CUSTOMER_ORDERS_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                orders: action.payload.orders,\r\n            };\r\n            break;\r\n    }\r\n\r\n    return state;\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\n// Reducers\r\nimport { authReducer, registrationReducer } from './reducers/adminReducer';\r\nimport {categoryReducer} from './reducers/category.reducer';\r\nimport {productReducer} from './reducers/product.reducer';\r\nimport {orderReducer} from './reducers/order.reducer';\r\n\r\nconst middleware = [thunk];\r\n\r\nconst reducer = combineReducers({\r\n    auth: authReducer,\r\n    regAuth: registrationReducer,\r\n    categoryState: categoryReducer,\r\n    productState: productReducer,\r\n    orders: orderReducer\r\n})\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store;","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\nimport './index.css';\n\n// Routing\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      {/* <React.StrictMode> */}\n        <App />\n      {/* </React.StrictMode> */}\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}